$ErrorActionPreference = "Stop"
$root = Join-Path (Get-Location) "atha-construction-ts"
New-Item -ItemType Directory -Force -Path $root | Out-Null
New-Item -ItemType Directory -Force -Path (Join-Path $root "src") | Out-Null
New-Item -ItemType Directory -Force -Path (Join-Path $root "src/data") | Out-Null
New-Item -ItemType Directory -Force -Path (Join-Path $root "src/routes") | Out-Null
New-Item -ItemType Directory -Force -Path (Join-Path $root "views") | Out-Null
New-Item -ItemType Directory -Force -Path (Join-Path $root "views/partials") | Out-Null
$b = "ewogICJuYW1lIjogImF0aGEtY29uc3RydWN0aW9uLXRzIiwKICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgInByaXZhdGUiOiB0cnVlLAogICJzY3JpcHRzIjogewogICAgImRldiI6ICJ0cy1ub2RlLWRldiAtLXJlc3Bhd24gLS10cmFuc3BpbGUtb25seSBzcmMvc2VydmVyLnRzIiwKICAgICJidWlsZCI6ICJ0c2MiLAogICAgInN0YXJ0IjogIm5vZGUgZGlzdC9zZXJ2ZXIuanMiCiAgfSwKICAiZGVwZW5kZW5jaWVzIjogewogICAgImNvbXByZXNzaW9uIjogIl4xLjcuNCIsCiAgICAiZWpzIjogIl4zLjEuOSIsCiAgICAiZXhwcmVzcyI6ICJeNC4xOS4yIiwKICAgICJtb3JnYW4iOiAiXjEuMTAuMCIKICB9LAogICJkZXZEZXBlbmRlbmNpZXMiOiB7CiAgICAiQHR5cGVzL2VqcyI6ICJeMy4xLjUiLAogICAgIkB0eXBlcy9leHByZXNzIjogIl40LjE3LjIxIiwKICAgICJAdHlwZXMvbW9yZ2FuIjogIl4xLjkuNiIsCiAgICAidHMtbm9kZS1kZXYiOiAiXjIuMC4wIiwKICAgICJ0eXBlc2NyaXB0IjogIl41LjUuNCIKICB9Cn0="
[IO.File]::WriteAllBytes((Join-Path $root "package.json"), [Convert]::FromBase64String($b))
$b = "ewogICJjb21waWxlck9wdGlvbnMiOiB7CiAgICAidGFyZ2V0IjogIkVTMjAyMCIsCiAgICAibW9kdWxlIjogImNvbW1vbmpzIiwKICAgICJtb2R1bGVSZXNvbHV0aW9uIjogIm5vZGUiLAogICAgIm91dERpciI6ICJkaXN0IiwKICAgICJyb290RGlyIjogInNyYyIsCiAgICAiZXNNb2R1bGVJbnRlcm9wIjogdHJ1ZSwKICAgICJmb3JjZUNvbnNpc3RlbnRDYXNpbmdJbkZpbGVOYW1lcyI6IHRydWUsCiAgICAic3RyaWN0IjogdHJ1ZSwKICAgICJza2lwTGliQ2hlY2siOiB0cnVlCiAgfSwKICAiaW5jbHVkZSI6IFsKICAgICJzcmMiCiAgXQp9"
[IO.File]::WriteAllBytes((Join-Path $root "tsconfig.json"), [Convert]::FromBase64String($b))
$b = ""
[IO.File]::WriteAllBytes((Join-Path $root "views/index.ejs"), [Convert]::FromBase64String($b))
$b = ""
[IO.File]::WriteAllBytes((Join-Path $root "views/about.ejs"), [Convert]::FromBase64String($b))
$b = ""
[IO.File]::WriteAllBytes((Join-Path $root "views/services.ejs"), [Convert]::FromBase64String($b))
$b = ""
[IO.File]::WriteAllBytes((Join-Path $root "views/careers.ejs"), [Convert]::FromBase64String($b))
$b = "PCUtIGluY2x1ZGUoInBhcnRpYWxzL2hlYWRlciIsIHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBrZXl3b3JkcywgaDEsIGN1cnJlbnRfcGFnZSwgQkFTRV9VUkwgfSkgJT4KCjxzZWN0aW9uIGNsYXNzPSJzZWMtYmFubmVyIj4KICAgIDxkaXYgY2xhc3M9ImJuci1pbWciPgogICAgICAgIDxpbWcgc3JjPSIuL2Fzc2V0ZXMvaW1hZ2VzL2NvbnRhY3QtdXMuanBnIiBjbGFzcz0idy0xMDAiIGFsdD0iQmVzdCBDb25zdHJ1Y3Rpb24gQ29tcGFuaWVzIGluIEJhbmdhbG9yZSIgdGl0bGU9IkJlc3QgQ29uc3RydWN0aW9uIENvbXBhbmllcyBpbiBCYW5nYWxvcmUiPgoKICAgICAgICA8ZGl2IGNsYXNzPSJiZy1ibnItbGF5ZXIiPgoKICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYmFuZXItY29udC1hYnMxIGQtbGctYmxvY2sgZC1ub25lIj4KICAgICAgICAgICAgPGgxPgogICAgICAgICAgICAgICBDb250YWN0CiAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgIAoKICAgICAgICA8L2Rpdj4KCgogICAgPC9kaXY+Cjwvc2VjdGlvbj4KCjxzZWN0aW9uIGNsYXNzPSJzZWMgYmctZGFyayB0ZXh0LWNlbnRlciB0ZXh0LXdoaXRlIiBpZD0ibmV4dC1zZWN0aW9uIj4KCiAgICA8ZGl2IGNsYXNzPSIgcHktNSI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KCiAgICAgICAgICAgIDxoMiBjbGFzcz0ibW4taGVkIj4KICAgICAgICAgICAgICAgIENvbnRhY3QgVXMKICAgICAgICAgICAgPC9oMj4KCgoKCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tY29udCBwdC00Ij4KCiAgICAgICAgICAgICAgICA8Zm9ybSByb2xlPSJmb3JtIiBuYW1lPSJmb3JtMSIgbWV0aG9kPSJwb3N0IiBpZD0iZm9vdGVyLWZvcm0iPgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJmb290ZXItbm90ZSI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hbS1tb2IiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0yIGlucC1pbm5lciI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9Im5hbWUiIGNsYXNzPSJwcy0wIGZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IkVudGVyIFlvdXIgTmFtZSIgcmVxdWlyZWQ9IiI+CgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMiBpbnAtaW5uZXIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRlbCIgbmFtZT0icGhvbmUiIHBsYWNlaG9sZGVyPSJQaG9uZSBOby4iIGNsYXNzPSJmb3JtLWNvbnRyb2wgcHMtMCIgdmFsdWU9IiIgcmVxdWlyZWQ9IiI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgoKCgoKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0yIj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgbmFtZT0iZW1haWwiIGNsYXNzPSJmb3JtLWNvbnRyb2wgcHMtMCIgcGxhY2Vob2xkZXI9IkVudGVyIGVtYWlsIj4KCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0yIHB0LTMgdGV4dC1zdGFydCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idHlwZSIgY2xhc3M9InR5cC1sYWIgIj5XaGF0IGtpbmQgb2YgY29uc3RydWN0aW9uIGFyZSB5b3UgbG9va2luZyBmb3IgPzwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0idHlwZSIgY2xhc3M9IiB3LTEwMCB0ZXh0LXdoaXRlIGRycC1kd24gcHQtMiIgaWQ9InR5cGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAgY2xhc3M9InRleHQtZGFyayBkcnAtZHduIiB2YWx1ZT0icmVzaWRlbnRpYWwiPlJlc2lkZW50aWFsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICBjbGFzcz0idGV4dC1kYXJrIGRycC1kd24iIHZhbHVlPSJjb21tZXJjaWFsIj5Db21tZXJjaWFsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMiBpbnAtaW5uZXIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0icGxvdHNpemUiIGNsYXNzPSJwcy0wIGZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IlBsb3Qgc2l6ZSA/IiByZXF1aXJlZD0iIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCgoKICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBpZD0iZm9vdGVyLWJ0biIgbmFtZT0iU3VibWl0IiBjbGFzcz0iYnRuIGZvb3Rlci1zdWIgIiB2YWx1ZT0iU3VibWl0Ij4KCiAgICAgICAgICAgICAgICA8L2Zvcm0+CgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+CgoKCgoKPCUtIGluY2x1ZGUoInBhcnRpYWxzL2Zvb3RlciIsIHsgY3VycmVudF9wYWdlLCBCQVNFX1VSTCB9KSAlPg=="
[IO.File]::WriteAllBytes((Join-Path $root "views/contact.ejs"), [Convert]::FromBase64String($b))
$b = "PCUtIGluY2x1ZGUoInBhcnRpYWxzL2hlYWRlciIsIHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBrZXl3b3JkcywgaDEsIGN1cnJlbnRfcGFnZSwgQkFTRV9VUkwgfSkgJT4KCgoKPHNlY3Rpb24gY2xhc3M9InNlYy1iYW5uZXIiPgogICAgPGRpdiBjbGFzcz0iYm5yLWltZyI+CiAgICAgICAgPGltZyBzcmM9Ii4vYXNzZXRlcy9pbWFnZXMvcHJvcGVydGllczIvYmFubmVyMi5wbmciIGNsYXNzPSJ3LTEwMCIgYWx0PSJyZXNpZGVudGlhbCBjb25zdHJ1Y3Rpb24gY29tcGFuaWVzIGluIGJhbmdhbG9yZSIgdGl0bGU9InJlc2lkZW50aWFsIGNvbnN0cnVjdGlvbiBjb21wYW5pZXMgaW4gYmFuZ2Fsb3JlIj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYmctYm5yLWxheWVyIj4KCiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImJhbmVyLWNvbnQtYWJzMSBkLWxnLWJsb2NrIGQtbm9uZSI+CiAgICAgICAgICAgIDxoMT4KICAgICAgICAgICAgICAgR0FMTEVSWQogICAgICAgICAgICA8L2gxPgogICAgICAgICAgICA8IS0tIDxwIGNsYXNzPSJibnItc3ViLWNvbnQiPgogICAgICAgICAgICAgICAgVG9tZXIgRnJpZG1hbiB8IENBIERSRSMgMDE3NTA3MTcKICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgPGJ1dHRvbj4KICAgICAgICAgICAgICAgIEVYUExPUkUKICAgICAgICAgICAgPC9idXR0b24+IC0tPgoKICAgICAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KPC9zZWN0aW9uPgoKPCEtLSAKPHNlY3Rpb24gY2xhc3M9InNlYyBweS01IHRleHQtY2VudGVyIiBpZD0ibmV4dC1zZWN0aW9uIj4KCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgoKICAgICAgICA8aDIgY2xhc3M9Im1uLWhlZCBweS00Ij4KICAgICAgICAgICAgT05HT0lORyBQUk9KRUNUCiAgICAgICAgPC9oMj4KCiAgICAgICAgPGltZyBzcmM9Ii4vYXNzZXRlcy9pbWFnZXMvcHJvcGVydGllczIvcm9zZXdvb2QucG5nIiBjbGFzcz0idy0xMDAiIGFsdD0iIj4KCiAgICAgICAgPHAgY2xhc3M9InByb3Atc3ViaGVkIHB0LTQgcGItMiBtYi0wIj4KICAgICAgICAgICAgUm9zZXdvb2QgUmVzaWRlbmNlcyBCZXZlcmx5IEhpbGxzCiAgICAgICAgPC9wPgoKICAgICAgICA8cCBjbGFzcz0icHJvcC1jbWZvbnQgcGItMiI+CiAgICAgICAgICAgIExvdWlzIFBhc3RldXIgU3QgMiwgdGVsIGF2aXYsIElzcmFlbAogICAgICAgIDwvcD4KCiAgICAgICAgPHAgY2xhc3M9InByb3AtcHJpYyBwdC00Ij4KICAgICAgICAgICAgJDU5LDAwMCwwMDAKICAgICAgICA8L3A+CgoKCiAgICA8L2Rpdj4KCjwvc2VjdGlvbj4gLS0+CgoKPHNlY3Rpb24gY2xhc3M9InNlYyBweS01IHRleHQtY2VudGVyIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGgyIGNsYXNzPSJtbi1oZWQgcHktNCI+R2FsbGVyeTwvaDI+CgogICAgICAgIDwhLS0gQ29udGFpbmVyIHRvIGhvbGQgZHluYW1pY2FsbHkgcmVuZGVyZWQgcHJvamVjdCBjYXJkcyAtLT4KICAgICAgICA8ZGl2IGlkPSJwcm9qZWN0TGlzdDQiIGNsYXNzPSJyb3cgZC1mbGV4IGp1c3RpZnktY29udGVudC1hcm91bmQgcHQtNCI+PC9kaXY+CgoKICAgIDwvZGl2Pgo8L3NlY3Rpb24+CgoKCjxzY3JpcHQgdHlwZT0ibW9kdWxlIj4KICAgIGltcG9ydCB7IGluaXRpYWxpemVBcHAgfSBmcm9tICJodHRwczovL3d3dy5nc3RhdGljLmNvbS9maXJlYmFzZWpzLzkuNi4xL2ZpcmViYXNlLWFwcC5qcyI7CiAgICBpbXBvcnQgeyBnZXRGaXJlc3RvcmUsIGNvbGxlY3Rpb24sIG9uU25hcHNob3QgfSBmcm9tICJodHRwczovL3d3dy5nc3RhdGljLmNvbS9maXJlYmFzZWpzLzkuNi4xL2ZpcmViYXNlLWZpcmVzdG9yZS5qcyI7CgogICAgLy8gRmlyZWJhc2UgY29uZmlndXJhdGlvbgogICAgY29uc3QgZmlyZWJhc2VDb25maWcgPSB7CiAgICAgICAgYXBpS2V5OiAiQUl6YVN5QUVweU1VS0k4ZUgyeFU3XzNWZTN3aFlXczdkWFdPcndJIiwKICAgICAgICBhdXRoRG9tYWluOiAiYXRoYS1lYjU5Ny5maXJlYmFzZWFwcC5jb20iLAogICAgICAgIGRhdGFiYXNlVVJMOiAiaHR0cHM6Ly9hdGhhLWViNTk3LWRlZmF1bHQtcnRkYi5maXJlYmFzZWlvLmNvbSIsCiAgICAgICAgcHJvamVjdElkOiAiYXRoYS1lYjU5NyIsCiAgICAgICAgc3RvcmFnZUJ1Y2tldDogImF0aGEtZWI1OTcuYXBwc3BvdC5jb20iLAogICAgICAgIG1lc3NhZ2luZ1NlbmRlcklkOiAiNzkzNzcyNjE0OTQ2IiwKICAgICAgICBhcHBJZDogIjE6NzkzNzcyNjE0OTQ2OndlYjo0NWZiNmI1MzAwNTJmYmRjNDRiMTdiIiwKICAgICAgICBtZWFzdXJlbWVudElkOiAiRy1OUjRDSzIxVENDIgogICAgfTsKCiAgICAvLyBJbml0aWFsaXplIEZpcmViYXNlCiAgICBjb25zdCBhcHAgPSBpbml0aWFsaXplQXBwKGZpcmViYXNlQ29uZmlnKTsKICAgIGNvbnN0IGRiID0gZ2V0RmlyZXN0b3JlKGFwcCk7CgogICAgLy8gRnVuY3Rpb24gdG8gcmVuZGVyIGEgc2luZ2xlIHByb2plY3QgaXRlbQogICAgZnVuY3Rpb24gcmVuZGVyUHJvamVjdEl0ZW0ocHJvamVjdCkgewogICAgICAgIGNvbnN0IHByb2plY3RMaXN0NCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcm9qZWN0TGlzdDQiKTsKCgogICAgICAgIC8vIENyZWF0ZSBhIG5ldyBkaXYgZWxlbWVudCBmb3IgdGhlIHByb2plY3QgY2FyZAogICAgICAgIGNvbnN0IHByb2plY3RDYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgcHJvamVjdENhcmQuY2xhc3NMaXN0LmFkZCgiY29sLWxnLTQiKTsKICAgICAgICBwcm9qZWN0Q2FyZC5jbGFzc0xpc3QuYWRkKCJ0ZXh0LWNlbnRlciIpOwogICAgICAgIHByb2plY3RDYXJkLmNsYXNzTGlzdC5hZGQoInBiLTUiKTsKICAgICAgCiAgICAgICAgLy8gQWRkIHRoZSBIVE1MIHN0cnVjdHVyZSBmb3IgdGhlIHByb2plY3QgY2FyZAogICAgICAgIHByb2plY3RDYXJkLmlubmVySFRNTCA9IGAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctcG9zcmVsIj4KICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLWZhbmN5Ym94PSJnYWxsZXJ5LTAiIGhyZWY9IiR7cHJvamVjdC5pbWdfdXJsfSIgZGF0YS1leHBhbmQ9Ii0xIiBjbGFzcz0iIGxhenkiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iJHtwcm9qZWN0LmltZ191cmx9IiBjbGFzcz0idy0xMDAiIGFsdD0iUHJvamVjdCBJbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgYDsKCiAgICAgICAKCiAgICAgICAgLy8gQXBwZW5kIHRoZSBwcm9qZWN0IGNhcmQgdG8gdGhlIHByb2plY3QgbGlzdCBjb250YWluZXIKICAgICAgICBwcm9qZWN0TGlzdDQuYXBwZW5kQ2hpbGQocHJvamVjdENhcmQpOwogICAgfQoKICAgIC8vIEZ1bmN0aW9uIHRvIHJlbmRlciBhbGwgcHJvamVjdHMKICAgIGZ1bmN0aW9uIHJlbmRlckFsbFByb2plY3RzKHByb2plY3RzKSB7CiAgICAgICAgY29uc3QgcHJvamVjdExpc3Q0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInByb2plY3RMaXN0NCIpOwogICAgICAgIHByb2plY3RMaXN0NC5pbm5lckhUTUwgPSAiIjsgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIGNvbnRlbnQKICAgICAgICBwcm9qZWN0cy5mb3JFYWNoKChwcm9qZWN0KSA9PiB7CiAgICAgICAgICAgIHJlbmRlclByb2plY3RJdGVtKHByb2plY3QpOwogICAgICAgIH0pOwogICAgfQoKICAgIC8vIEZ1bmN0aW9uIHRvIGZldGNoIHByb2plY3RzIGluIHJlYWwtdGltZSBmcm9tIEZpcmVzdG9yZQogICAgYXN5bmMgZnVuY3Rpb24gZ2V0UHJvamVjdHNSZWFsVGltZSgpIHsKICAgICAgICBjb25zdCBkYlJlZiA9IGNvbGxlY3Rpb24oZGIsICJJbWFnZXMiKTsKCiAgICAgICAgb25TbmFwc2hvdChkYlJlZiwgKHF1ZXJ5U25hcHNob3QpID0+IHsKICAgICAgICAgICAgY29uc3QgcHJvamVjdHMgPSBbXTsKICAgICAgICAgICAgcXVlcnlTbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHsKICAgICAgICAgICAgICAgIHByb2plY3RzLnB1c2goZG9jLmRhdGEoKSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZW5kZXJBbGxQcm9qZWN0cyhwcm9qZWN0cyk7CiAgICAgICAgfSk7CiAgICB9CgogICAgLy8gRnVuY3Rpb24gdG8gc3RvcmUgcHJvamVjdCBkYXRhIGluIGxvY2FsU3RvcmFnZQogICAgZnVuY3Rpb24gc3RvcmVQcm9qZWN0RGF0YShwcm9qZWN0KSB7CiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oInNlbGVjdGVkUHJvamVjdCIsIEpTT04uc3RyaW5naWZ5KHByb2plY3QpKTsKICAgIH0KCiAgICAvLyBGdW5jdGlvbiB0byByZW5kZXIgc2VsZWN0ZWQgcHJvamVjdCBkZXRhaWxzCiAgICBmdW5jdGlvbiByZW5kZXJTZWxlY3RlZFByb2plY3QocHJvamVjdCkgewoKICAgICAgICAvLyBDcmVhdGUgdGhlIHN0cnVjdHVyZSBmb3IgdGhlIHNlbGVjdGVkIHByb2plY3QKICAgICAgICBjb25zdCBwcm9qZWN0RGV0YWlscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgIHByb2plY3REZXRhaWxzLmNsYXNzTGlzdC5hZGQoImNvbC0xMiIsICJ0ZXh0LWNlbnRlciIsICJwYi01Iik7CgoKICAgICAgICBwcm9qZWN0RGV0YWlscy5pbm5lckhUTUwgPSBgCgogICAgICAgIDxpbWcgc3JjPSIke3Byb2plY3QuaW1nX3VybH0iIGNsYXNzPSJwcm8tZGV0IiBhbHQ9IiI+CgogICAgICAgIDxwIGNsYXNzPSJwcm9wLXN1YmhlZCBwdC00IHBiLTIgbWItMCI+CiAgICAgICAgJHtwcm9qZWN0LnRpdGxlfQogICAgICAgIDwvcD4KCiAgICAgICAgPHAgY2xhc3M9InByb3AtY21mb250IHBiLTIiPgogICAgICAgICR7cHJvamVjdC5kZXN9CiAgICAgICAgPC9wPgoKICAgICAgICA8cCBjbGFzcz0icHJvcC1wcmljIHB0LTQiPgogICAgICAgICR7cHJvamVjdC5mZWV0c30KICAgICAgICA8L3A+CiAgICAgICAgPHAgY2xhc3M9InByb2otaW5QcmljIj4ke3Byb2plY3QucHJpY2V9PC9wPgogICAgYDsKCiAgICAgICAKICAgIH0KCiAgICAvLyBGdW5jdGlvbiB0byBsb2FkIHNlbGVjdGVkIHByb2plY3QgZGV0YWlscyBvbiBwYWdlIGxvYWQKICAgIGZ1bmN0aW9uIGxvYWRTZWxlY3RlZFByb2plY3RPblBhZ2VMb2FkKCkgewogICAgICAgIGNvbnN0IHN0b3JlZFByb2plY3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgic2VsZWN0ZWRQcm9qZWN0Iik7CiAgICAgICAgaWYgKHN0b3JlZFByb2plY3QpIHsKICAgICAgICAgICAgY29uc3QgcHJvamVjdCA9IEpTT04ucGFyc2Uoc3RvcmVkUHJvamVjdCk7CiAgICAgICAgICAgIHJlbmRlclNlbGVjdGVkUHJvamVjdChwcm9qZWN0KTsKICAgICAgICB9CiAgICB9CgogICAgLy8gRXZlbnQgTGlzdGVuZXI6IExvYWQgc3RvcmVkIHByb2plY3Qgb24gcGFnZSBsb2FkCiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgbG9hZFNlbGVjdGVkUHJvamVjdE9uUGFnZUxvYWQpOwoKICAgIC8vIEZldGNoIHByb2plY3RzIG9uIHBhZ2UgbG9hZAogICAgZ2V0UHJvamVjdHNSZWFsVGltZSgpOwo8L3NjcmlwdD4KCjwhLS1wb3B1cGltZy0tPgo8bGluayByZWw9InN0eWxlc2hlZXQiIG1lZGlhPSJhbGwiIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZhbmN5Ym94LzMuNS43L2pxdWVyeS5mYW5jeWJveC5jc3MiIG1lZGlhPSJwcmludCIgb25sb2FkPSJ0aGlzLm1lZGlhPSdhbGwnIj4KPHNjcmlwdCBkZWZlciBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZhbmN5Ym94LzMuNS43L2pxdWVyeS5mYW5jeWJveC5taW4uanMiPjwvc2NyaXB0PgoKCjwlLSBpbmNsdWRlKCJwYXJ0aWFscy9mb290ZXIiLCB7IGN1cnJlbnRfcGFnZSwgQkFTRV9VUkwgfSkgJT4="
[IO.File]::WriteAllBytes((Join-Path $root "views/gallery.ejs"), [Convert]::FromBase64String($b))
$b = ""
[IO.File]::WriteAllBytes((Join-Path $root "views/properties.ejs"), [Convert]::FromBase64String($b))
$b = ""
[IO.File]::WriteAllBytes((Join-Path $root "views/packages.ejs"), [Convert]::FromBase64String($b))
$b = "PCUtIGluY2x1ZGUoInBhcnRpYWxzL2hlYWRlciIsIHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBrZXl3b3JkcywgaDEsIGN1cnJlbnRfcGFnZSwgQkFTRV9VUkwgfSkgJT4KCjxzZWN0aW9uIGNsYXNzPSJzZWMtYmFubmVyIj4KICAgIDxkaXYgY2xhc3M9ImJuci1pbWciPgogICAgICAgIDxpbWcgc3JjPSIuL2Fzc2V0ZXMvaW1hZ2VzL2Jsb2ctaGVhZGVyLWltYWdlLmpwZyIgY2xhc3M9InctMTAwIiBhbHQ9IkJ1aWxkaW5nIENvbnRyYWN0b3JzIGluIEJhbmdhbG9yZSIgdGl0bGU9IkJ1aWxkaW5nIENvbnRyYWN0b3JzIGluIEJhbmdhbG9yZSI+CgogICAgICAgIDxkaXYgY2xhc3M9ImJnLWJuci1sYXllciI+CgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJiYW5lci1jb250LWFiczEgZC1sZy1ibG9jayBkLW5vbmUiPgogICAgICAgICAgICA8aDE+CiAgICAgICAgICAgICAgICBCbG9ncwogICAgICAgICAgICA8L2gxPgogICAgICAgICAgIAoKICAgICAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KPC9zZWN0aW9uPgoKCgo8c2VjdGlvbiBjbGFzcz0icHktNSBibG9ncyIgaWQ9Im5leHQtc2VjdGlvbiI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgcHgtMiBweC1tZC01Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJtYWluLWhlYWRpbmcgdGV4dC1jZW50ZXIgbWItNCI+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iZnMtMSI+TEFURVNUIE5FV1M8L2gyPgogICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1jZW50ZXIiPlNlZSB3aGF0IHRoZSBwcmVzcyBoYXMgdG8gc2F5LjwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoKICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgbWItNSI+ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSI8JT0gQkFTRV9VUkwgJT48JT0gaHRtbHNwZWNpYWxjaGFycyhwb3N0LmltYWdlKSAlPiIgYWx0PSI8JT0gaHRtbHNwZWNpYWxjaGFycyhwb3N0LmFsdCkgJT4iIGNsYXNzPSJpbWctZmx1aWQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyLWJsb2ctYm94Ij4gICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDxoNj48JT0gaHRtbHNwZWNpYWxjaGFycyhwb3N0LmRhdGUpICU+IDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoND48JT0gaHRtbHNwZWNpYWxjaGFycyhwb3N0LnRpdGxlKSAlPjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjwlPSBodG1sc3BlY2lhbGNoYXJzKHN1YnN0cihzdHJpcF90YWdzKHBvc3QuY29udGVudCksIDAsIDIwMCkpICU+Li4uPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI8JT0gQkFTRV9VUkwgLiAnYmxvZy8nIC4gcG9zdC5zbHVnICU+IiBjbGFzcz0iYnRuLXRoZW1lLWRhcmsgdGV4dC11cHBlcmNhc2UiPlJlYWQgTW9yZTwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KPC9zZWN0aW9uPgoKPCUtIGluY2x1ZGUoInBhcnRpYWxzL2Zvb3RlciIsIHsgY3VycmVudF9wYWdlLCBCQVNFX1VSTCB9KSAlPg=="
[IO.File]::WriteAllBytes((Join-Path $root "views/blogs.ejs"), [Convert]::FromBase64String($b))
$b = ""
[IO.File]::WriteAllBytes((Join-Path $root "views/blog_detail.ejs"), [Convert]::FromBase64String($b))
$b = "PCFkb2N0eXBlIGh0bWw+CjxodG1sPgoKPGhlYWQ+CgogICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgCgogICA8bWV0YSBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPW5vIiBuYW1lPSJ2aWV3cG9ydCI+CgogICA8dGl0bGU+QXRoYSBDb25zdHJ1Y3Rpb248L3RpdGxlPgoKICAgPG1ldGEgbmFtZT0idGl0bGUiIGNvbnRlbnQ9IkF0aGEgQ29uc3RydWN0aW9uIj4KCiAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Jvb3RzdHJhcC81LjEuMy9qcy9ib290c3RyYXAubWluLmpzIiByZWw9InN0eWxlc2hlZXQiIC8+CgogICA8bGluayBocmVmPSIuL2Fzc2V0cy9pbWFnZXMvbmV3L2xvZ28ucG5nIiByZWw9Imljb24iIHR5cGU9ImltYWdlL3BuZyI+CgogICA8bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUdlbnRpdW0rQmFzaWM6aXRhbCx3Z2h0QDAsNDAwOzAsNzAwOzEsNzAwJmFtcDtmYW1pbHk9UG9wcGluczppdGFsLHdnaHRAMCw0MDA7MCw2MDA7MCw3MDA7MSwzMDAmYW1wO2Rpc3BsYXk9c3dhcCIgcmVsPSJzdHlsZXNoZWV0Ij4KCgoKICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KICAgICAgLm1fdGhhbmt5b3UgewogICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICAgICAgfQoKICAgICAgLnRoYW5reW91IHsKICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjsKICAgICAgICAgcG9zaXRpb246IGZpeGVkOwogICAgICAgICB0b3A6IDA7CiAgICAgICAgIHJpZ2h0OiAwOwogICAgICAgICBib3R0b206IDA7CiAgICAgICAgIGxlZnQ6IDA7CiAgICAgIH0KCiAgICAgIC50aGFua3lvdSAuY29udGVudCB7CiAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgIHBhZGRpbmc6IDE1cHg7CiAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgbGVmdDogNTAlOwogICAgICAgICB0b3A6IDUwJTsKICAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsKICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CiAgICAgIH0KCiAgICAgIC5jb250ZW50IGgxIHsKICAgICAgICAgZm9udC1zaXplOiA4MHB4OwogICAgICAgICBjb2xvcjogIzAwMDsKICAgICAgICAgcGFkZGluZzogMzhweCAwIDMwcHggMDsKICAgICAgfQoKICAgICAgaDEsCiAgICAgIGgyLAogICAgICBoMywKICAgICAgaDQgewogICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgIGxpbmUtaGVpZ2h0OiAxOwogICAgICB9CgogICAgICAuY29udGVudCBwIHsKICAgICAgICAgZm9udC1zaXplOiA0MHB4OwogICAgICAgICBjb2xvcjogIzAwMDsKICAgICAgICAgbGluZS1oZWlnaHQ6IDQ3cHg7CiAgICAgIH0KICAgPC9zdHlsZT4KPC9oZWFkPgoKPGJvZHk+CiAgIDxkaXYgY2xhc3M9InRoYW5reW91IG1fdGhhbmt5b3UiPgogICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgPGgzIGNsYXNzPSJsb2dvIj48aW1nIHNyYz0iYXNzZXRlcy9pbWFnZXMvbG9nby5wbmciIGFsdD0iQXRoYSBDb25zdHJ1Y3Rpb24iIHN0eWxlPSJtYXgtd2lkdGg6MjUwcHgiPjwvaDM+CiAgICAgICAgIDxoMT5UaGFuayB5b3UgZm9yIHlvdXIgaW50ZXJlc3Q8L2gxPgogICAgICAgICA8cD5PdXIgcmVwcmVzZW50YXRpdmUgd2lsbCBnZXQgaW4gdG91Y2ggd2l0aCB5b3Ugc2hvcnRseS48L3A+CiAgICAgICAgIDxhIGhyZWY9Ii4vIiBzdHlsZT0idGV4dC1hbGlnbjpjZW50ZXI7cGFkZGluZzoxMHB4IDE1cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmU7YmFja2dyb3VuZDojMDAwO2NvbG9yOiNmZmYiPkhvbWU8L2E+CiAgICAgIDwvZGl2PgogICA8L2Rpdj4KPC9ib2R5Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzMuNi4wL2pxdWVyeS5taW4uanMiPjwvc2NyaXB0PgoKPC9ib2R5PgoKPC9odG1sPg=="
[IO.File]::WriteAllBytes((Join-Path $root "views/thankyou.ejs"), [Convert]::FromBase64String($b))
$b = ""
[IO.File]::WriteAllBytes((Join-Path $root "views/partials/header.ejs"), [Convert]::FromBase64String($b))
$b = "Cgo8c2VjdGlvbiBjbGFzcz0idGVzdGltb25pYWwgb3ZlcmZsb3ctaGlkZGVuIHB5LTUgZC1ub25lIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CgogICAgICAgIDxoMiBjbGFzcz0ibW4taGVkIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgV0hBVCBPVVIgQ0xJRU5UJ3MgU0FZID8KICAgICAgICA8L2gyPgogICAgICAgIDxkaXYgY2xhc3M9Im93bHNsaWRlciBvd2wtY2Fyb3VzZWwgb3dsLXRoZW1lIHB0LTUiIGlkPSJ0ZXN0aW1vbmlhbC1vd2wiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRlc3RpbW9uaWFsLWNvbnRlbnQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSAgZmEtc29saWQgZmEtcXVvdGUtbGVmdCB0ZXh0LWRhcmsiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8cD4iQXRoYSBDb25zdHJ1Y3Rpb24gZGVsaXZlcmVkIGJleW9uZCBvdXIgZXhwZWN0YXRpb25zISBUaGUgYXR0ZW50aW9uIHRvIGRldGFpbCBhbmQgcXVhbGl0eSBvZiB3b3JrIGFyZSB0cnVseSBjb21tZW5kYWJsZS4gRnJvbSBkZXNpZ24gdG8gZXhlY3V0aW9uLCB0aGUgdGVhbSBlbnN1cmVkIGV2ZXJ5dGhpbmcgd2FzIHNlYW1sZXNzIGFuZCBoYXNzbGUtZnJlZS4gSGlnaGx5IHJlY29tbWVuZCB0aGVtIGZvciBhbnkgY29uc3RydWN0aW9uIG5lZWRzISI8L3A+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVzZXItbmFtZSI+4oCTIFJhaHVsIE1laHRhLCBCZW5nYWx1cnU8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRlc3RpbW9uaWFsLWNvbnRlbnQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSAgZmEtc29saWQgZmEtcXVvdGUtbGVmdCB0ZXh0LWRhcmsiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8cD4iV2Ugd2VyZSBpbXByZXNzZWQgYnkgdGhlIHByb2Zlc3Npb25hbGlzbSBhbmQgcHVuY3R1YWxpdHkgb2YgQXRoYSBDb25zdHJ1Y3Rpb24uIE91ciBwcm9qZWN0IHdhcyBjb21wbGV0ZWQgcmlnaHQgb24gdGltZSB3aXRob3V0IGNvbXByb21pc2luZyBvbiBxdWFsaXR5LiBUaGVpciBjb21taXRtZW50IHRvIG9uLXRpbWUgZGVsaXZlcnkgaXMgdW5tYXRjaGVkISI8L3A+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVzZXItbmFtZSI+LSBTdWhhc2luaSBSYW8sIE15c3VydTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXN0aW1vbmlhbC1jb250ZW50IHRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgIGZhLXNvbGlkIGZhLXF1b3RlLWxlZnQgdGV4dC1kYXJrIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPHA+IkF0aGEgQ29uc3RydWN0aW9uIHN0YW5kcyBvdXQgZm9yIGl0cyB0cmFuc3BhcmVuY3kgYW5kIGhvbmVzdCBhcHByb2FjaC4gVGhlIHRlYW0ga2VwdCB1cyB1cGRhdGVkIGF0IGV2ZXJ5IHN0YWdlLCBlbnN1cmluZyBjb21wbGV0ZSBwZWFjZSBvZiBtaW5kLiBUaGVpciBFU0NST1cgZmFjaWxpdHkgd2FzIGEgZ2FtZS1jaGFuZ2VyIGZvciB1cyEiPC9wPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1c2VyLW5hbWUiPi0gRGluZXNoIEt1bGthcm5pLCBCYWxsYXJpPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRlc3RpbW9uaWFsLWNvbnRlbnQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSAgZmEtc29saWQgZmEtcXVvdGUtbGVmdCB0ZXh0LWRhcmsiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8cD4iQ2hvb3NpbmcgQXRoYSBDb25zdHJ1Y3Rpb24gd2FzIHRoZSBiZXN0IGRlY2lzaW9uIHdlIG1hZGUuIFRoZWlyIHVzZSBvZiBhZHZhbmNlZCB0ZWNobm9sb2d5IGFuZCBzdXN0YWluYWJsZSBwcmFjdGljZXMgbm90IG9ubHkgbWV0IG91ciByZXF1aXJlbWVudHMgYnV0IGV4Y2VlZGVkIHRoZW0uIFdlIG5vdyBoYXZlIGEgYmVhdXRpZnVsLCBlY28tZnJpZW5kbHkgaG9tZSB0aGF0IHdlIGxvdmUhIjwvcD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idXNlci1uYW1lIj4tIEFuYW55YSBTaW5naCwgQmVuZ2FsdXJ1PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRlc3RpbW9uaWFsLWNvbnRlbnQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSAgZmEtc29saWQgZmEtcXVvdGUtbGVmdCB0ZXh0LWRhcmsiPjwvaT4KICAgICAgICAgICAgICAgICAgICA8cD4iQXRoYSBDb25zdHJ1Y3Rpb24ncyBkZWRpY2F0aW9uIHRvIGNsaWVudCBzYXRpc2ZhY3Rpb24gaXMgcmVtYXJrYWJsZS4gVGhleSB3ZW50IHRoZSBleHRyYSBtaWxlIHRvIGFkZHJlc3MgZXZlcnkgY29uY2VybiBhbmQgZGVsaXZlcmVkIGEgc3BhY2UgdGhhdCBwZXJmZWN0bHkgbWF0Y2hlcyBvdXIgdmlzaW9uLiBBIHJlbGlhYmxlIHBhcnRuZXIgZm9yIGFueSBwcm9qZWN0ISI8L3A+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVzZXItbmFtZSI+LSBSYXZpIFNoZXR0eSwgTXlzdXJ1PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKCiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9zZWN0aW9uPgoKPHNlY3Rpb24gY2xhc3M9ImJnLWRhcmsgdGV4dC13aGl0ZSBweS01IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBweC1sZy01IG14LWxnLTUgIj4KICAgICAgICA8aDIgY2xhc3M9Im1uLWhlZCB0ZXh0LWNlbnRlciBwYi00Ij4KICAgICAgICAgICAgT1VSIEJMT0cKICAgICAgICA8L2gyPgoKICAgICAgICAKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJsZy0xIHBvcy1yZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9IjwlPSBodG1sc3BlY2lhbGNoYXJzKCRwb3N0WydpbWFnZSddKSAlPiIgY2xhc3M9InctMTAwIiBhbHQ9IjwlPSBodG1sc3BlY2lhbGNoYXJzKCRwb3N0WydhbHQnXSkgJT4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWJzLWJsb2cgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IjwlPSBCQVNFX1VSTCAuICdibG9nLycgLiBodG1sc3BlY2lhbGNoYXJzKCRwb3N0WydzbHVnJ10pICU+IiBjbGFzcz0idGV4dC1kZWNvcmF0aW9uLW5vbmUgdGV4dC13aGl0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwlPSBodG1sc3BlY2lhbGNoYXJzKCRwb3N0Wyd0aXRsZSddKSAlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtdC00Ij4KICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02IHBvcy1yZWwiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSI8JT0gaHRtbHNwZWNpYWxjaGFycygkcG9zdFsnaW1hZ2UnXSkgJT4iIGNsYXNzPSJ3LTEwMCBibGctMiIgYWx0PSI8JT0gaHRtbHNwZWNpYWxjaGFycygkcG9zdFsnYWx0J10pICU+Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhYnMtYmxvZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IjwlPSBCQVNFX1VSTCAuICdibG9nLycgLiBodG1sc3BlY2lhbGNoYXJzKCRwb3N0WydzbHVnJ10pICU+IiBjbGFzcz0idGV4dC1kZWNvcmF0aW9uLW5vbmUgdGV4dC13aGl0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8JT0gbmwyYnIoaHRtbHNwZWNpYWxjaGFycygkcG9zdFsndGl0bGUnXSkpICU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgoKCgoKICAgICAgICA8IS0tPGRpdiBjbGFzcz0iYmxnLTEgcG9zLXJlbCI+CiAgICAgICAgICAgIDxpbWcgc3JjPSJhc3NldGVzL2ltYWdlcy9ibG9nLTEucG5nIiBjbGFzcz0idy0xMDAiIGFsdD0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWJzLWJsb2cgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgQnVzaW5lc3MgSW5zaWRlcjogQ2VsZWJyaXR5IFJlYWwgRXN0YXRlIEFnZW50LCBUb21lciBGcmlkbWFuLCBPdXRsaW5lcyB0aGUgMyBGZWF0dXJlcyBUaGF0CiAgICAgICAgICAgICAgICBNYWtlIEx1eHVyeSBQcm9wZXJ0aWVzIFN0YW5kIE91dAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0icm93IG10LTQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBwb3MtcmVsIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJhc3NldGVzL2ltYWdlcy9ibG9nLTIuanBlZyIgY2xhc3M9InctMTAwIGJsZy0yIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhYnMtYmxvZyI+CiAgICAgICAgICAgICAgICAgICAgVGhlIFdhbGxzdHJlZXQgSm91cm5hbCBGZWF0dXJlcyAxNDcxIEZvcmVzdAogICAgICAgICAgICAgICAgICAgIEtub2xsCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBwb3MtcmVsIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJhc3NldGVzL2ltYWdlcy9ibG9nLTMucG5nIiBjbGFzcz0idy0xMDAgYmxnLTIiIGFsdD0iIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFicy1ibG9nIj4KICAgICAgICAgICAgICAgICAgICBBcmNoaXRlY3R1cmFsIERpZ2VzdDogVG91ciBhIE1pZGNlbnR1cnktIDxicj4KICAgICAgICAgICAgICAgICAgICBJbnNwaXJlZCBIb2xseXdvb2QgSGlsbHMgSWR5bGwgTGlzdGVkIGJ5IFRvbWVy4oCmCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgIDwvZGl2Pi0tPgogICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIG10LTUiPgogICAgICAgICAgICA8YSBjbGFzcz0iY20tYnQxIHRleHQtZGVjb3JhdGlvbi1ub25lIHRleHQtd2hpdGUiIGhyZWY9ImJsb2dzIj4KICAgICAgICAgICAgICAgIFZJRVcgQUxMCiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KCjwvc2VjdGlvbj4KCgo8c2VjdGlvbiBjbGFzcz0id29yay13aXRoIHBvcy1yZWwiPgogICAgPGltZyBzcmM9IjwlPSBCQVNFX1VSTCAlPmFzc2V0ZXMvaW1hZ2VzL0NhcmVlcnMucG5nIiBjbGFzcz0idy0xMDAgcG9zLXJlbCBkLW5vbmUgZC1tZC1ibG9jayIgYWx0PSJiZXN0IGhvdXNlIGNvbnN0cnVjdGlvbiBjb21wYW5pZXMgaW4gYmFuZ2Fsb3JlIiB0aXRsZT0iYmVzdCBob3VzZSBjb25zdHJ1Y3Rpb24gY29tcGFuaWVzIGluIGJhbmdhbG9yZSI+CiAgICA8ZGl2IGNsYXNzPSJ3d3UtYWJzIGNvbnRhaW5lciB0ZXh0LWNlbnRlciI+CiAgICAgICAgPGgyIGNsYXNzPSJtbi1oZWQgdGV4dC1jZW50ZXIgcGItNCI+CiAgICAgICAgICAgIFdPUksgV0lUSCBVUwogICAgICAgIDwvaDI+CiAgICAgICAgPHAgY2xhc3M9ImNtLWZudCI+CgogICAgICAgICAgICBPdXIgZ29hbCBpcyB0byBvZmZlciBhbiB1bnBhcmFsbGVsZWQgbGV2ZWwgb2Ygc2VydmljZSB0byBvdXIgaGlnaGx5IHJlc3BlY3RlZCBjbGllbnRzLiBXaGV0aGVyIHlvdSBhcmUgbG9va2luZyB0byBidXkgb3Igc2VsbCB5b3VyIGhvbWUsCiAgICAgICAgICAgIHdlIGd1YXJhbnRlZSB0aGF0IG91ciBleHBlcnRpc2UsIHByb2Zlc3Npb25hbGlzbSBhbmQgZGVkaWNhdGlvbiB3aWxsIGd1aWRlIHlvdSB0b3dhcmQgbWVldGluZyB5b3VyIHVuaXF1ZSByZWFsIGVzdGF0ZSBuZWVkcy4KCiAgICAgICAgPC9wPgogICAgICAgIDxidXR0b24gY2xhc3M9ImNtLWJ0MSBkLWJsb2NrIG14LWF1dG8gbXQtNSAiPgogICAgICAgICAgICBDT05UQUNUIFVTCiAgICAgICAgPC9idXR0b24+CgogICAgPC9kaXY+Cjwvc2VjdGlvbj4KCjxzZWN0aW9uIGNsYXNzPSJmYXEtc2VjdGlvbiBweS01Ij4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGgyIGNsYXNzPSJ0ZXh0LWNlbnRlciBtbi1oZWQgbWItNSI+RnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnM8L2gyPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTEwIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY29yZGlvbiIgaWQ9ImZhcUFjY29yZGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBRdWVzdGlvbiAxIC0tPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY29yZGlvbi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJhY2NvcmRpb24taGVhZGVyIiBpZD0iaGVhZGluZ09uZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJhY2NvcmRpb24tYnV0dG9uIHRleHQtbGlnaHQgYmctZGFyayIgdHlwZT0iYnV0dG9uIiBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtYnMtdGFyZ2V0PSIjY29sbGFwc2VPbmUiIGFyaWEtZXhwYW5kZWQ9InRydWUiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlT25lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaGF0IHNlcnZpY2VzIGRvZXMgeW91ciBjb25zdHJ1Y3Rpb24gY29tcGFueSBwcm92aWRlPwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlT25lIiBjbGFzcz0iYWNjb3JkaW9uLWNvbGxhcHNlIGNvbGxhcHNlIHNob3ciIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZ09uZSIgZGF0YS1icy1wYXJlbnQ9IiNmYXFBY2NvcmRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdlIG9mZmVyIGEgd2lkZSByYW5nZSBvZiBzZXJ2aWNlcywgaW5jbHVkaW5nIHJlc2lkZW50aWFsIGFuZCBjb21tZXJjaWFsIGNvbnN0cnVjdGlvbiwgcmVtb2RlbGluZywgcmVub3ZhdGlvbnMsIHByb2plY3QgbWFuYWdlbWVudCwgYW5kIGN1c3RvbSBkZXNpZ24tYnVpbGQgc2VydmljZXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY29yZGlvbi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJhY2NvcmRpb24taGVhZGVyIiBpZD0iaGVhZGluZ0xldmVuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImFjY29yZGlvbi1idXR0b24gdGV4dC1saWdodCBiZy1kYXJrIGNvbGxhcHNlZCIgdHlwZT0iYnV0dG9uIiBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtYnMtdGFyZ2V0PSIjY29sbGFwc2VMZXZlbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlTGV2ZW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRG8geW91IGludGVydmVuZSBjbGllbnQgaW4gc2VsZWN0aW9uIG9mIE1hdGVyaWFscyA/IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlTGV2ZW4iIGNsYXNzPSJhY2NvcmRpb24tY29sbGFwc2UgY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZ0xldmVuIiBkYXRhLWJzLXBhcmVudD0iI2ZhcUFjY29yZGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NvcmRpb24tYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBZZXMsIHdlIGRvLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8IS0tIFF1ZXN0aW9uIDIgLS0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImFjY29yZGlvbi1oZWFkZXIiIGlkPSJoZWFkaW5nVHdvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImFjY29yZGlvbi1idXR0b24gdGV4dC1saWdodCBiZy1kYXJrIGNvbGxhcHNlZCIgdHlwZT0iYnV0dG9uIiBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtYnMtdGFyZ2V0PSIjY29sbGFwc2VUd28iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZVR3byI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJlIHlvdSBsaWNlbnNlZCBhbmQgaW5zdXJlZD8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjb2xsYXBzZVR3byIgY2xhc3M9ImFjY29yZGlvbi1jb2xsYXBzZSBjb2xsYXBzZSIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nVHdvIiBkYXRhLWJzLXBhcmVudD0iI2ZhcUFjY29yZGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NvcmRpb24tYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWWVzLCB3ZSBhcmUgZnVsbHkgbGljZW5zZWQsIGJvbmRlZCwgYW5kIGluc3VyZWQgdG8gZW5zdXJlIGNvbXBsaWFuY2Ugd2l0aCBsb2NhbCByZWd1bGF0aW9ucyBhbmQgdG8gcHJvdmlkZSBwZWFjZSBvZiBtaW5kIHRvIG91ciBjbGllbnRzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwhLS0gUXVlc3Rpb24gMyAtLT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NvcmRpb24taXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iYWNjb3JkaW9uLWhlYWRlciIgaWQ9ImhlYWRpbmdUaHJlZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJhY2NvcmRpb24tYnV0dG9uIHRleHQtbGlnaHQgYmctZGFyayBjb2xsYXBzZWQiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI2NvbGxhcHNlVGhyZWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZVRocmVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIb3cgbG9uZyBoYXMgeW91ciBjb21wYW55IGJlZW4gaW4gYnVzaW5lc3M/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY29sbGFwc2VUaHJlZSIgY2xhc3M9ImFjY29yZGlvbi1jb2xsYXBzZSBjb2xsYXBzZSIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nVGhyZWUiIGRhdGEtYnMtcGFyZW50PSIjZmFxQWNjb3JkaW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY29yZGlvbi1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPdXIgY29tcGFueSBoYXMgYmVlbiBzZXJ2aW5nIHRoZSBjb21tdW5pdHkgZm9yIDYgeWVhcnMsIGRlbGl2ZXJpbmcgaGlnaC1xdWFsaXR5IGNvbnN0cnVjdGlvbiBwcm9qZWN0cyB0YWlsb3JlZCB0byBvdXIgY2xpZW50cycgbmVlZHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImFjY29yZGlvbi1oZWFkZXIiIGlkPSJoZWFkaW5nRm91ciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJhY2NvcmRpb24tYnV0dG9uIHRleHQtbGlnaHQgYmctZGFyayBjb2xsYXBzZWQiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI2NvbGxhcHNlRm91ciIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlRm91ciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG8geW91IHByb3ZpZGUgZnJlZSBwcm9qZWN0IGVzdGltYXRlcz8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjb2xsYXBzZUZvdXIiIGNsYXNzPSJhY2NvcmRpb24tY29sbGFwc2UgY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZ0ZvdXIiIGRhdGEtYnMtcGFyZW50PSIjZmFxQWNjb3JkaW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY29yZGlvbi1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZZXMsIHdlIHByb3ZpZGUgZnJlZSBhbmQgZGV0YWlsZWQgcHJvamVjdCBlc3RpbWF0ZXMgdG8gaGVscCB5b3UgdW5kZXJzdGFuZCB0aGUgc2NvcGUgYW5kIGJ1ZGdldCBvZiB5b3VyIHByb2plY3QuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImFjY29yZGlvbi1oZWFkZXIiIGlkPSJoZWFkaW5nRml2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJhY2NvcmRpb24tYnV0dG9uIHRleHQtbGlnaHQgYmctZGFyayBjb2xsYXBzZWQiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI2NvbGxhcHNlRml2ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlRml2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hhdCBhcmVhcyBkbyB5b3Ugc2VydmU/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY29sbGFwc2VGaXZlIiBjbGFzcz0iYWNjb3JkaW9uLWNvbGxhcHNlIGNvbGxhcHNlIiBhcmlhLWxhYmVsbGVkYnk9ImhlYWRpbmdGaXZlIiBkYXRhLWJzLXBhcmVudD0iI2ZhcUFjY29yZGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NvcmRpb24tYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2Ugc2VydmUgQmFuZ2Fsb3JlLiBJZiB5b3UncmUgdW5zdXJlIHdoZXRoZXIgd2UgY292ZXIgeW91ciBhcmVhLCBmZWVsIGZyZWUgdG8gY29udGFjdCB1cy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NvcmRpb24taXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iYWNjb3JkaW9uLWhlYWRlciIgaWQ9ImhlYWRpbmdTaXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYWNjb3JkaW9uLWJ1dHRvbiB0ZXh0LWxpZ2h0IGJnLWRhcmsgY29sbGFwc2VkIiB0eXBlPSJidXR0b24iIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS1icy10YXJnZXQ9IiNjb2xsYXBzZVNpeCIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlU2l4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIb3cgbG9uZyBkb2VzIGl0IHRha2UgdG8gY29tcGxldGUgYSBjb25zdHJ1Y3Rpb24gcHJvamVjdD8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjb2xsYXBzZVNpeCIgY2xhc3M9ImFjY29yZGlvbi1jb2xsYXBzZSBjb2xsYXBzZSIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nU2l4IiBkYXRhLWJzLXBhcmVudD0iI2ZhcUFjY29yZGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NvcmRpb24tYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvamVjdCB0aW1lbGluZXMgdmFyeSBiYXNlZCBvbiB0aGUgc2l6ZSwgc2NvcGUsIGFuZCBjb21wbGV4aXR5IG9mIHRoZSBwcm9qZWN0LiBPbmNlIHdlIHVuZGVyc3RhbmQgeW91ciByZXF1aXJlbWVudHMsIHdl4oCZbGwgcHJvdmlkZSBhIHJlYWxpc3RpYyB0aW1lbGluZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NvcmRpb24taXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iYWNjb3JkaW9uLWhlYWRlciIgaWQ9ImhlYWRpbmdTZXZlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJhY2NvcmRpb24tYnV0dG9uIHRleHQtbGlnaHQgYmctZGFyayBjb2xsYXBzZWQiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI2NvbGxhcHNlU2V2ZW4iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZVNldmVuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaGF0IGlzIHRoZSBwcm9jZXNzIGZvciBzdGFydGluZyBhIGNvbnN0cnVjdGlvbiBwcm9qZWN0PwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlU2V2ZW4iIGNsYXNzPSJhY2NvcmRpb24tY29sbGFwc2UgY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZ1NldmVuIiBkYXRhLWJzLXBhcmVudD0iI2ZhcUFjY29yZGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NvcmRpb24tYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3VyIHByb2Nlc3MgaW52b2x2ZXMgYW4gaW5pdGlhbCBjb25zdWx0YXRpb24sIHNpdGUgZXZhbHVhdGlvbiwgZGVzaWduIGFuZCBwbGFubmluZywgY29zdCBlc3RpbWF0aW9uLCBjb250cmFjdCBhZ3JlZW1lbnQsIGFuZCBwcm9qZWN0IGV4ZWN1dGlvbi4gV2UnbGwgZ3VpZGUgeW91IGV2ZXJ5IHN0ZXAgb2YgdGhlIHdheS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY2NvcmRpb24taXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iYWNjb3JkaW9uLWhlYWRlciIgaWQ9ImhlYWRpbmdFaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJhY2NvcmRpb24tYnV0dG9uIHRleHQtbGlnaHQgYmctZGFyayBjb2xsYXBzZWQiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI2NvbGxhcHNlRWlnaHQiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZUVpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYW4gSSBtYWtlIGNoYW5nZXMgdG8gdGhlIHByb2plY3Qgb25jZSBjb25zdHJ1Y3Rpb24gaGFzIHN0YXJ0ZWQ/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY29sbGFwc2VFaWdodCIgY2xhc3M9ImFjY29yZGlvbi1jb2xsYXBzZSBjb2xsYXBzZSIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nRWlnaHQiIGRhdGEtYnMtcGFyZW50PSIjZmFxQWNjb3JkaW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY29yZGlvbi1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZZXMsIGJ1dCBjaGFuZ2VzIG1heSBpbXBhY3QgdGhlIHRpbWVsaW5lIGFuZCBjb3N0LiBXZeKAmWxsIGRpc2N1c3MgYW55IGFkanVzdG1lbnRzIGFuZCBlbnN1cmUgeW914oCZcmUgaW5mb3JtZWQgYmVmb3JlIHByb2NlZWRpbmcuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImFjY29yZGlvbi1oZWFkZXIiIGlkPSJoZWFkaW5nTmluZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJhY2NvcmRpb24tYnV0dG9uIHRleHQtbGlnaHQgYmctZGFyayBjb2xsYXBzZWQiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI2NvbGxhcHNlTmluZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlTmluZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG8geW91IGhhbmRsZSBhbGwgcGVybWl0cyBhbmQgYXBwcm92YWxzPwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlTmluZSIgY2xhc3M9ImFjY29yZGlvbi1jb2xsYXBzZSBjb2xsYXBzZSIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nTmluZSIgZGF0YS1icy1wYXJlbnQ9IiNmYXFBY2NvcmRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFllcywgd2UgaGFuZGxlIGFsbCBuZWNlc3NhcnkgcGVybWl0cyBhbmQgYXBwcm92YWxzIHRvIGVuc3VyZSB5b3VyIHByb2plY3QgY29tcGxpZXMgd2l0aCBsb2NhbCBidWlsZGluZyBjb2RlcyBhbmQgcmVndWxhdGlvbnMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9ImFjY29yZGlvbi1oZWFkZXIiIGlkPSJoZWFkaW5nVGVuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImFjY29yZGlvbi1idXR0b24gdGV4dC1saWdodCBiZy1kYXJrIGNvbGxhcHNlZCIgdHlwZT0iYnV0dG9uIiBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtYnMtdGFyZ2V0PSIjY29sbGFwc2VUZW4iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZVRlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSG93IGRvIHlvdSBlbnN1cmUgdGhlIHF1YWxpdHkgb2YgeW91ciB3b3JrPwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlVGVuIiBjbGFzcz0iYWNjb3JkaW9uLWNvbGxhcHNlIGNvbGxhcHNlIiBhcmlhLWxhYmVsbGVkYnk9ImhlYWRpbmdUZW4iIGRhdGEtYnMtcGFyZW50PSIjZmFxQWNjb3JkaW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY29yZGlvbi1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXZSB1c2UgcHJlbWl1bSBtYXRlcmlhbHMsIGhpcmUgc2tpbGxlZCBwcm9mZXNzaW9uYWxzLCBhbmQgYWRoZXJlIHRvIHN0cmljdCBxdWFsaXR5IGNvbnRyb2wgbWVhc3VyZXMgdGhyb3VnaG91dCB0aGUgcHJvamVjdC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L3NlY3Rpb24+CgoKCjxzZWN0aW9uIGNsYXNzPSJmb290ZXIgcHktNSI+CgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00IHRleHQtd2hpdGUiPgogICAgICAgICAgICAgICAgPGltZyBzcmM9IjwlPSBCQVNFX1VSTCAlPmFzc2V0ZXMvaW1hZ2VzL2Zvb3Rlci1sb2dvLnBuZyIgY2xhc3M9ImZ0ci1sb2dvIiBhbHQ9IkF0aGEgY29uc3RydWN0aW9uIGluIGJhbmdhbG9yZSIgdGl0bGU9IkF0aGEgY29uc3RydWN0aW9uIGluIGJhbmdhbG9yZSI+IAoKICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJmdHItaGVkIj4KICAgICAgICAgICAgICAgICAgICBCYW5nYWxvcmUKICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtbWFwLW1hcmtlci1hbHQiPjwvaT4mbmJzcDsmbmJzcDs8YSBocmVmPSJodHRwczovL21hcHMuYXBwLmdvby5nbC9HOEV6dW8yYThwYmtuU2trOCIgY2xhc3M9InRleHQtZGVjb3JhdGlvbi1ub25lIHRleHQtd2hpdGUiIHRhcmdldD0iX2JsYW5rIj4gTm8uODEvMzcsIEdyb3VuZCBGbG9vciwgVGhlIEh1bGt1bCwgTGF2ZWxsZSBSb2FkLCBCZW5nYWx1cnUgLSA1NjAwMDEuIDwvYT4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJmdHItaGVkIj4KICAgICAgICAgICAgICAgICAgICBCYWxsYXJpCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLW1hcC1tYXJrZXItYWx0Ij48L2k+Jm5ic3A7Jm5ic3A7PGEgaHJlZj0iaHR0cHM6Ly9tYXBzLmFwcC5nb28uZ2wvTWRRMmdpMmlQR0tYUU5uMjgiIGNsYXNzPSJ0ZXh0LWRlY29yYXRpb24tbm9uZSB0ZXh0LXdoaXRlIiB0YXJnZXQ9Il9ibGFuayI+IEZpcnN0IEZsb29yLCBQVlIgUGxhemEsIE5vIDcsIDNyZCBDcm9zcyBSZCwgTmVocnUgQ29sb255LCBTaWRpZ2luYW1vbGEsIEJhbGxhcmksIEthcm5hdGFrYSA1ODMxMDMuIDwvYT4KICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZnRyLWhlZCI+CiAgICAgICAgICAgICAgICBNeXNvcmUKICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtbWFwLW1hcmtlci1hbHQiPjwvaT4mbmJzcDsmbmJzcDs8YSBocmVmPSIjIiBjbGFzcz0idGV4dC1kZWNvcmF0aW9uLW5vbmUgdGV4dC13aGl0ZSIgdGFyZ2V0PSJfYmxhbmsiPiBWSUpBWSBBUkNBREUsICMgMTcxNCBTYXJ2b2RheWEgUm9hZCBFJkYgQmxvY2sgUmFta3Jpc2huYSBOYWdhciAgKGt1dmVtcHXCoE5hZ2FyKSwgTXlzb3JlwqA1NzAwMDkgPC9hPgogICAgICAgICAgICAgICAgPC9wPgoKICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJmdHItaGVkIj4KICAgICAgICAgICAgICAgICAgICBDb250YWN0IFVzCiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8IS0tPHA+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0idGVsOiswODA0OTc3NjYxNiIgY2xhc3M9InRleHQtZGVjb3JhdGlvbi1ub25lIHRleHQtd2hpdGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXBob25lIj48L2k+IExhbmRsaW5lIOKAkyAwODA0OTc3NjYxNgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ0ZWw6Kzk2MDY5NTYwNDQgIiBjbGFzcz0idGV4dC1kZWNvcmF0aW9uLW5vbmUgdGV4dC13aGl0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtbW9iaWxlLWFsdCI+PC9pPiBNb2JpbGUgTnVtYmVyIOKAkyA5NjA2OTU2MDQ0IAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvcD4tLT4KCiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJtYWlsdG86IGluZm9AYXRoYWNvbnN0cnVjdGlvbi5pbiIgY2xhc3M9InRleHQtZGVjb3JhdGlvbi1ub25lIHRleHQtd2hpdGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWVudmVsb3BlIj48L2k+ICBpbmZvQGF0aGFjb25zdHJ1Y3Rpb24uaW4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0idGVsOis5MSA4MDQ5Nzc2NjE2ICIgY2xhc3M9InRleHQtZGVjb3JhdGlvbi1ub25lIHRleHQtd2hpdGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEtc29saWQgZmEtcGhvbmUiPjwvaT4rOTEgODA0OTc3NjYxNiAKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ0ZWw6KzkxIDk2MDY5NTYwNDQgIiBjbGFzcz0idGV4dC1kZWNvcmF0aW9uLW5vbmUgdGV4dC13aGl0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYS1zb2xpZCBmYS1waG9uZSI+PC9pPis5MSA5NjA2OTU2MDQ0IAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICAKCgoKICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgcHMtNSI+CgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icHQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IjwlPSBCQVNFX1VSTCAlPiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIT01FCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InB0LTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI8JT0gQkFTRV9VUkwgJT5hYm91dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBQk9VVAogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iPCU9IEJBU0VfVVJMICU+cHJvcGVydGllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUk9QRVJUSUVTCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InB0LTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI8JT0gQkFTRV9VUkwgJT5wYWNrYWdlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQUNLQUdFUwogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iPCU9IEJBU0VfVVJMICU+Y2FyZWVycyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDQVJFRVJTCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InB0LTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI8JT0gQkFTRV9VUkwgJT5ibG9ncyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCTE9HUwogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iPCU9IEJBU0VfVVJMICU+Y29udGFjdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT05UQUNUIFVTCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KCiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InNvY2lhbC1tZWRpYSI+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vcHJvZmlsZS5waHA/aWQ9NjE1NjkzNzY0Njg0MjUiIGFyaWEtbGFiZWw9IkZhY2Vib29rIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYWIgZmEtZmFjZWJvb2siPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2F0aGFfY29uc3RydWN0aW9uLyIgYXJpYS1sYWJlbD0iSW5zdGFncmFtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYWIgZmEtaW5zdGFncmFtIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvbXBhbnkvYXRoYWNvbnN0cnVjdGlvbi5pbi8iIGFyaWEtbGFiZWw9IkxpbmtlZEluIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYWIgZmEtbGlua2VkaW4iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQgdGV4dC13aGl0ZSI+CiAgICAgICAgICAgICAgICA8aDQ+CiAgICAgICAgICAgICAgICAgICAgRU5RVUlSWSBGT1JNCiAgICAgICAgICAgICAgICA8L2g0PgoKCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXJfZm9ybSI+CgoKCgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm1faW5uZXIgZm90ZXItZm9ybSBwdC0yIj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIHJvbGU9ImZvcm0iIG5hbWU9ImZvcm0xIiBtZXRob2Q9InBvc3QiIGlkPSJmb290ZXItZm9ybSI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZm9vdGVyLW5vdGUiPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hbS1tb2IiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTIgaW5wLWlubmVyIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJuYW1lIiBjbGFzcz0icHMtMCBmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSJFbnRlciBZb3VyIE5hbWUiIHJlcXVpcmVkPSIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0yIGlucC1pbm5lciI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRlbCIgbmFtZT0icGhvbmUiIHBsYWNlaG9sZGVyPSJQaG9uZSBOby4iIGNsYXNzPSJmb3JtLWNvbnRyb2wgcHMtMCIgdmFsdWU9IiIgcmVxdWlyZWQ9IiI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMiI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgbmFtZT0iZW1haWwiIGNsYXNzPSJmb3JtLWNvbnRyb2wgcHMtMCIgcGxhY2Vob2xkZXI9IkVudGVyIGVtYWlsIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0yIHB0LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InR5cGUiIGNsYXNzPSJ0eXAtbGFiIj5XaGF0IGtpbmQgb2YgY29uc3RydWN0aW9uIGFyZSB5b3UgbG9va2luZyBmb3IgPzwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0idHlwZSIgY2xhc3M9IiB3LTEwMCB0ZXh0LXdoaXRlIGRycC1kd24gcHQtMiIgaWQ9InR5cGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAgY2xhc3M9InRleHQtZGFyayBkcnAtZHduIiB2YWx1ZT0icmVzaWRlbnRpYWwiPlJlc2lkZW50aWFsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICBjbGFzcz0idGV4dC1kYXJrIGRycC1kd24iIHZhbHVlPSJjb21tZXJjaWFsIj5Db21tZXJjaWFsPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMiBpbnAtaW5uZXIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0icGxvdHNpemUiIGNsYXNzPSJwcy0wIGZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IlBsb3Qgc2l6ZSA/IiByZXF1aXJlZD0iIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgaWQ9ImZvb3Rlci1idG4iIG5hbWU9IlN1Ym1pdCIgY2xhc3M9ImJ0biBmb290ZXItc3ViIG10LTMiIHZhbHVlPSJTdWJtaXQiPgoKICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCgoKICAgICAgICAgICAgICAgIDwvZGl2PgoKCgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKPC9zZWN0aW9uPgoKCgoKPCEtLSAKCjxzY3JpcHQgdHlwZT0ibW9kdWxlIj4KICAvLyBJbXBvcnQgdGhlIGZ1bmN0aW9ucyB5b3UgbmVlZCBmcm9tIHRoZSBTREtzIHlvdSBuZWVkCiAgaW1wb3J0IHsgaW5pdGlhbGl6ZUFwcCB9IGZyb20gImh0dHBzOi8vd3d3LmdzdGF0aWMuY29tL2ZpcmViYXNlanMvMTEuMC4xL2ZpcmViYXNlLWFwcC5qcyI7CiAgaW1wb3J0IHsgZ2V0QW5hbHl0aWNzIH0gZnJvbSAiaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vZmlyZWJhc2Vqcy8xMS4wLjEvZmlyZWJhc2UtYW5hbHl0aWNzLmpzIjsKICAvLyBUT0RPOiBBZGQgU0RLcyBmb3IgRmlyZWJhc2UgcHJvZHVjdHMgdGhhdCB5b3Ugd2FudCB0byB1c2UKICAvLyBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy93ZWIvc2V0dXAjYXZhaWxhYmxlLWxpYnJhcmllcwoKICAvLyBZb3VyIHdlYiBhcHAncyBGaXJlYmFzZSBjb25maWd1cmF0aW9uCiAgLy8gRm9yIEZpcmViYXNlIEpTIFNESyB2Ny4yMC4wIGFuZCBsYXRlciwgbWVhc3VyZW1lbnRJZCBpcyBvcHRpb25hbAogIGNvbnN0IGZpcmViYXNlQ29uZmlnID0gewogICAgYXBpS2V5OiAiQUl6YVN5QUVweU1VS0k4ZUgyeFU3XzNWZTN3aFlXczdkWFdPcndJIiwgCiAgICBhdXRoRG9tYWluOiAiYXRoYS1lYjU5Ny5maXJlYmFzZWFwcC5jb20iLAogICAgcHJvamVjdElkOiAiYXRoYS1lYjU5NyIsCiAgICBzdG9yYWdlQnVja2V0OiAiYXRoYS1lYjU5Ny5maXJlYmFzZXN0b3JhZ2UuYXBwIiwKICAgIG1lc3NhZ2luZ1NlbmRlcklkOiAiNzkzNzcyNjE0OTQ2IiwKICAgIGFwcElkOiAiMTo3OTM3NzI2MTQ5NDY6d2ViOjQ1ZmI2YjUzMDA1MmZiZGM0NGIxN2IiLAogICAgbWVhc3VyZW1lbnRJZDogIkctTlI0Q0syMVRDQyIKICB9OwoKICAvLyBJbml0aWFsaXplIEZpcmViYXNlCiAgY29uc3QgYXBwID0gaW5pdGlhbGl6ZUFwcChmaXJlYmFzZUNvbmZpZyk7CiAgY29uc3QgYW5hbHl0aWNzID0gZ2V0QW5hbHl0aWNzKGFwcCk7Cjwvc2NyaXB0PgoKIC0tPgoKCgoKPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vQHBvcHBlcmpzL2NvcmVAMi4xMS44L2Rpc3QvdW1kL3BvcHBlci5taW4uanMiIGludGVncml0eT0ic2hhMzg0LUk3RThWVkQvaXNtWVRGNGhOSVBqVnAvWmp2Z3lvbDZWRnZSa1gvdlIrVmM0alFrQytoVnFjMnBNOE9EZXdhOXIiIGNyb3Nzb3JpZ2luPSJhbm9ueW1vdXMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9ib290c3RyYXBANS4zLjMvZGlzdC9qcy9ib290c3RyYXAubWluLmpzIiBpbnRlZ3JpdHk9InNoYTM4NC0wcFVHWnZia202WEY2Z3hqRW5sbXVHckpYVmJOdXpUOXFCQmF2Ykx3Q3NPR2FiWWZabzBUMHRvNWVxcnVwdEx5IiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj48L3NjcmlwdD4KCjwhLS1qcXVlcnkgY2RuLS0+CjxzY3JpcHQgc3JjPSdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9qcXVlcnkvMy4zLjEvanF1ZXJ5Lm1pbi5qcyc+PC9zY3JpcHQ+Cgo8IS0tIGZvbnRhd3NvbSBpY29ucyAtLT4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzYuMC4wL2Nzcy9hbGwubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ij4KCjwhLS0gb3dsIGNvcm9zaWwgLS0+CjxsaW5rIGhyZWY9J2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL093bENhcm91c2VsMi8yLjMuNC9hc3NldHMvb3dsLmNhcm91c2VsLm1pbi5jc3MnIHJlbD0nc3R5bGVzaGVldCcKICAgIG1lZGlhPSJwcmludCIgb25sb2FkPSJ0aGlzLm1lZGlhPSdhbGwnIj4KCjxzY3JpcHQgZGVmZXIgc3JjPSdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9Pd2xDYXJvdXNlbDIvMi4zLjQvb3dsLmNhcm91c2VsLm1pbi5qcyc+PC9zY3JpcHQ+CgoKCgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHRvdGFsU3RlcHMgPSAkKCIuc3RlcHMgbGkiKS5sZW5ndGg7CgogICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGZpcnN0IHN0ZXAgYW5kIGZvcm0gc2VjdGlvbgogICAgICAgICQoIi5zdGVwcyBsaTpudGgtb2YtdHlwZSgxKSIpLmFkZENsYXNzKCJhY3RpdmUiKTsKICAgICAgICAkKCIubXlDb250YWluZXIgLmZvcm0tY29udGFpbmVyOm50aC1vZi10eXBlKDEpIikuYWRkQ2xhc3MoImFjdGl2ZSIpOwoKICAgICAgICBsZXQgYXV0b1BsYXlJbnRlcnZhbDsgLy8gSW50ZXJ2YWwgZm9yIGF1dG9wbGF5IGZ1bmN0aW9uYWxpdHkKCiAgICAgICAgLy8gRnVuY3Rpb24gdG8gbmF2aWdhdGUgdG8gdGhlIG5leHQgc3RlcAogICAgICAgIGZ1bmN0aW9uIGdvVG9OZXh0U3RlcCgpIHsKICAgICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9ICQoIi5mb3JtLWNvbnRhaW5lci5hY3RpdmUiKS5pbmRleCgpOwogICAgICAgICAgICBpZiAoY3VycmVudEluZGV4IDwgdG90YWxTdGVwcyAtIDEpIHsKICAgICAgICAgICAgICAgICQoIi5zdGVwcyBsaSIpLmVxKGN1cnJlbnRJbmRleCArIDEpLmFkZENsYXNzKCJhY3RpdmUiKTsKICAgICAgICAgICAgICAgICQoIi5mb3JtLWNvbnRhaW5lciIpCiAgICAgICAgICAgICAgICAgICAgLmVxKGN1cnJlbnRJbmRleCkKICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoImFjdGl2ZSBmbGlwSW5YIikKICAgICAgICAgICAgICAgICAgICAubmV4dCgpCiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJhY3RpdmUgZmxpcEluWCIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVzZXRUb0ZpcnN0U3RlcCgpOyAvLyBMb29wIHRvIHRoZSBmaXJzdCBzdGVwCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIEZ1bmN0aW9uIHRvIHJlc2V0IHRvIHRoZSBmaXJzdCBzdGVwCiAgICAgICAgZnVuY3Rpb24gcmVzZXRUb0ZpcnN0U3RlcCgpIHsKICAgICAgICAgICAgJCgiLnN0ZXBzIGxpIikucmVtb3ZlQ2xhc3MoImFjdGl2ZSIpOwogICAgICAgICAgICAkKCIuZm9ybS1jb250YWluZXIiKS5yZW1vdmVDbGFzcygiYWN0aXZlIGZsaXBJblgiKTsKICAgICAgICAgICAgJCgiLnN0ZXBzIGxpOm50aC1vZi10eXBlKDEpIikuYWRkQ2xhc3MoImFjdGl2ZSIpOwogICAgICAgICAgICAkKCIuZm9ybS1jb250YWluZXI6bnRoLW9mLXR5cGUoMSkiKS5hZGRDbGFzcygiYWN0aXZlIGZsaXBJblgiKTsKICAgICAgICB9CgogICAgICAgIC8vIEZ1bmN0aW9uIHRvIGF1dG9wbGF5IHN0ZXBzCiAgICAgICAgZnVuY3Rpb24gc3RhcnRBdXRvUGxheSgpIHsKICAgICAgICAgICAgc3RvcEF1dG9QbGF5KCk7IC8vIEVuc3VyZSBubyBtdWx0aXBsZSBpbnRlcnZhbHMKICAgICAgICAgICAgYXV0b1BsYXlJbnRlcnZhbCA9IHNldEludGVydmFsKGdvVG9OZXh0U3RlcCwgMTAwMCk7IC8vIENoYW5nZSBzdGVwIGV2ZXJ5IDUgc2Vjb25kcwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc3RvcEF1dG9QbGF5KCkgewogICAgICAgICAgICBjbGVhckludGVydmFsKGF1dG9QbGF5SW50ZXJ2YWwpOwogICAgICAgIH0KCiAgICAgICAgLy8gTmV4dCBidXR0b24gZnVuY3Rpb25hbGl0eQogICAgICAgICQoIi5mb3JtLWNvbnRhaW5lciIpLm9uKCJjbGljayIsICIubmV4dCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc3RvcEF1dG9QbGF5KCk7IC8vIFN0b3AgYXV0b3BsYXkgb24gbWFudWFsIGludGVyYWN0aW9uCiAgICAgICAgICAgIGdvVG9OZXh0U3RlcCgpOwogICAgICAgIH0pOwoKICAgICAgICAvLyBCYWNrIGJ1dHRvbiBmdW5jdGlvbmFsaXR5CiAgICAgICAgJCgiLmZvcm0tY29udGFpbmVyIikub24oImNsaWNrIiwgIi5iYWNrIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBzdG9wQXV0b1BsYXkoKTsgLy8gU3RvcCBhdXRvcGxheSBvbiBtYW51YWwgaW50ZXJhY3Rpb24KICAgICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9ICQoIi5mb3JtLWNvbnRhaW5lci5hY3RpdmUiKS5pbmRleCgpOwogICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID4gMCkgewogICAgICAgICAgICAgICAgJCgiLnN0ZXBzIGxpIikuZXEoY3VycmVudEluZGV4KS5yZW1vdmVDbGFzcygiYWN0aXZlIik7CiAgICAgICAgICAgICAgICAkKCIuZm9ybS1jb250YWluZXIiKQogICAgICAgICAgICAgICAgICAgIC5lcShjdXJyZW50SW5kZXgpCiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCJhY3RpdmUgZmxpcEluWCIpCiAgICAgICAgICAgICAgICAgICAgLnByZXYoKQogICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygiYWN0aXZlIGZsaXBJblkiKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvLyBTdGVwIGNsaWNrIGZ1bmN0aW9uYWxpdHkgKG9wdGlvbmFsKQogICAgICAgICQoIi5zdGVwcyBsaSIpLm9uKCJjbGljayIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc3RvcEF1dG9QbGF5KCk7IC8vIFN0b3AgYXV0b3BsYXkgb24gbWFudWFsIGludGVyYWN0aW9uCiAgICAgICAgICAgIHZhciBzdGVwSW5kZXggPSAkKHRoaXMpLmluZGV4KCk7CiAgICAgICAgICAgICQoIi5zdGVwcyBsaSIpLnJlbW92ZUNsYXNzKCJhY3RpdmUiKTsKICAgICAgICAgICAgJCh0aGlzKS5wcmV2QWxsKCkuYWRkQ2xhc3MoImFjdGl2ZSIpOwogICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCJhY3RpdmUiKTsKCiAgICAgICAgICAgICQoIi5teUNvbnRhaW5lciAuZm9ybS1jb250YWluZXIiKS5yZW1vdmVDbGFzcygiYWN0aXZlIGZsaXBJblgiKTsKICAgICAgICAgICAgJCgiLm15Q29udGFpbmVyIC5mb3JtLWNvbnRhaW5lciIpLmVxKHN0ZXBJbmRleCkuYWRkQ2xhc3MoImFjdGl2ZSBmbGlwSW5YIik7CiAgICAgICAgfSk7CgogICAgICAgIC8vIFN0YXJ0IGF1dG9wbGF5CiAgICAgICAgc3RhcnRBdXRvUGxheSgpOwogICAgfSk7CgogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNjcm9sbC1kb3duJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgY29uc3QgbmV4dFNlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV4dC1zZWN0aW9uJyk7CiAgICAgICAgaWYgKG5leHRTZWN0aW9uKSB7CiAgICAgICAgICAgIG5leHRTZWN0aW9uLnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pOwogICAgICAgIH0KICAgIH0pOwoKICAgICQoJy5zY3JvbGwtZG93bicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7CiAgICAgICAgICAgIHNjcm9sbFRvcDogJCgnI25leHQtc2VjdGlvbicpLm9mZnNldCgpLnRvcCAtIDc1IC8vIEFkanVzdCBzY3JvbGwgcG9zaXRpb24gMTAwcHggYWJvdmUgdGhlIHRhcmdldAogICAgICAgIH0sIDgwMCk7IC8vIEFkanVzdCB0aGUgc3BlZWQgKDgwMG1zKQogICAgfSk7CgoKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsKICAgICAgICAgICAgcm9vdDogbnVsbCwgLy8gVmlld3BvcnQgaXMgdGhlIHJvb3QKICAgICAgICAgICAgdGhyZXNob2xkOiAwLjEsIC8vIFRyaWdnZXIgd2hlbiAxMCUgb2YgdGhlIHNlY3Rpb24gaXMgdmlzaWJsZQogICAgICAgIH07CgogICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzLCBvYnNlcnZlcikgPT4gewogICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4gewogICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gU2VsZWN0IGFuZCBhbmltYXRlIGxlZnQgZ3JvdXAgcGFyYWdyYXBocwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRHcm91cCA9IGVudHJ5LnRhcmdldC5xdWVyeVNlbGVjdG9yQWxsKCIuYW5pbWF0ZWQtZ3JvdXAtbGVmdCBwIik7CiAgICAgICAgICAgICAgICAgICAgbGVmdEdyb3VwLmZvckVhY2goKHAsIGluZGV4KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5zdHlsZS5hbmltYXRpb24gPSBgZmFkZUluTGVmdCAwLjVzIGVhc2Utb3V0ICR7aW5kZXggKiAwLjV9cyBmb3J3YXJkc2A7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3QgYW5kIGFuaW1hdGUgcmlnaHQgZ3JvdXAgcGFyYWdyYXBocwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0R3JvdXAgPSBlbnRyeS50YXJnZXQucXVlcnlTZWxlY3RvckFsbCgiLmFuaW1hdGVkLWdyb3VwLXJpZ2h0IHAiKTsKICAgICAgICAgICAgICAgICAgICByaWdodEdyb3VwLmZvckVhY2goKHAsIGluZGV4KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5zdHlsZS5hbmltYXRpb24gPSBgZmFkZUluUmlnaHQgMC41cyBlYXNlLW91dCAke2luZGV4ICogMC41fXMgZm9yd2FyZHNgOwogICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7IC8vIFN0b3Agb2JzZXJ2aW5nIGFmdGVyIGFuaW1hdGlvbgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9LCBvcHRpb25zKTsKCiAgICAgICAgLy8gT2JzZXJ2ZSBlYWNoIGFuaW1hdGVkIHNlY3Rpb24KICAgICAgICBjb25zdCBzZWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIi5hbmltYXRlZC1zZWN0aW9uIik7CiAgICAgICAgc2VjdGlvbnMuZm9yRWFjaChzZWN0aW9uID0+IG9ic2VydmVyLm9ic2VydmUoc2VjdGlvbikpOwogICAgfSk7CgoKCgoKICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgICAgICQoIiN0ZXN0aW1vbmlhbC1vd2wiKS5vd2xDYXJvdXNlbCh7CiAgICAgICAgICAgIGl0ZW1zOiAyLAogICAgICAgICAgICBkb3RzOiB0cnVlLAogICAgICAgICAgICBtYXJnaW46IDUwLAogICAgICAgICAgICBuYXY6IHRydWUsCiAgICAgICAgICAgIGxvb3A6IHRydWUsCiAgICAgICAgICAgIGF1dG9wbGF5OiAzMDAwLAogICAgICAgICAgICBhdXRvcGxheUhvdmVyUGF1c2U6IHRydWUsCiAgICAgICAgICAgIHNsaWRlU3BlZWQ6IDMwMDAsCiAgICAgICAgICAgIHBhZ2luYXRpb25TcGVlZDogNTAwMCwKICAgICAgICAgICAgc21hcnRTcGVlZDogMTAwMCwKICAgICAgICAgICAgbmF2VGV4dDogWyI8aSBjbGFzcz0nZmEgZmEtYXJyb3ctbGVmdCc+PC9pPiIsICI8aSBjbGFzcz0nZmEgZmEtYXJyb3ctcmlnaHQnPjwvaT4iXSwKICAgICAgICAgICAgcmVzcG9uc2l2ZTogewogICAgICAgICAgICAgICAgOTkyOiB7CiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IDMKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICA2MDA6IHsKICAgICAgICAgICAgICAgICAgICBpdGVtczogMwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIDMyMDogewogICAgICAgICAgICAgICAgICAgIGl0ZW1zOiAyCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgMjgwOiB7CiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IDIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSk7CgoKICAgIGZ1bmN0aW9uIHNob3dNb2RlbCgpIHsKICAgICAgICBjb25zdCBwb3BVcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3BVcCcpOwogICAgICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheScpOwoKICAgICAgICAvLyBUcmlnZ2VyIHRoZSBzaG93IGFuaW1hdGlvbnMKICAgICAgICBwb3BVcC5jbGFzc0xpc3QuYWRkKCJzaG93Iik7CiAgICAgICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKCJzaG93Iik7CiAgICB9CgogICAgZnVuY3Rpb24gY2xvc2VNb2RlbCgpIHsKICAgICAgICBjb25zdCBwb3BVcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3BVcCcpOwogICAgICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheScpOwoKICAgICAgICAvLyBUcmlnZ2VyIHRoZSBoaWRlIGFuaW1hdGlvbnMKICAgICAgICBwb3BVcC5jbGFzc0xpc3QucmVtb3ZlKCJzaG93Iik7CiAgICAgICAgb3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCJzaG93Iik7CiAgICB9CgogICAgLy8gMm5kIHBvcHVwCgogICAgZnVuY3Rpb24gc2hvd01vZGVsMSgpIHsKICAgICAgICBjb25zdCBwb3BVcDEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9wVXAxJyk7CiAgICAgICAgY29uc3Qgb3ZlcmxheTEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheTEnKTsKCiAgICAgICAgLy8gVHJpZ2dlciB0aGUgc2hvdyBhbmltYXRpb25zCiAgICAgICAgcG9wVXAxLmNsYXNzTGlzdC5hZGQoInNob3ciKTsKICAgICAgICBvdmVybGF5MS5jbGFzc0xpc3QuYWRkKCJzaG93Iik7CiAgICB9CgogICAgZnVuY3Rpb24gY2xvc2VNb2RlbDEoKSB7CiAgICAgICAgY29uc3QgcG9wVXAxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvcFVwMScpOwogICAgICAgIGNvbnN0IG92ZXJsYXkxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXkxJyk7CgogICAgICAgIC8vIFRyaWdnZXIgdGhlIGhpZGUgYW5pbWF0aW9ucwogICAgICAgIHBvcFVwMS5jbGFzc0xpc3QucmVtb3ZlKCJzaG93Iik7CiAgICAgICAgb3ZlcmxheTEuY2xhc3NMaXN0LnJlbW92ZSgic2hvdyIpOwogICAgfQoKCiAgICAvLyAzbmQgcG9wdXAKCiAgICBmdW5jdGlvbiBzaG93TW9kZWwyKCkgewogICAgICAgIGNvbnN0IHBvcFVwMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3BVcDInKTsKICAgICAgICBjb25zdCBvdmVybGF5MSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5MicpOwoKICAgICAgICAvLyBUcmlnZ2VyIHRoZSBzaG93IGFuaW1hdGlvbnMKICAgICAgICBwb3BVcDEuY2xhc3NMaXN0LmFkZCgic2hvdyIpOwogICAgICAgIG92ZXJsYXkxLmNsYXNzTGlzdC5hZGQoInNob3ciKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjbG9zZU1vZGVsMigpIHsKICAgICAgICBjb25zdCBwb3BVcDEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9wVXAyJyk7CiAgICAgICAgY29uc3Qgb3ZlcmxheTEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheTInKTsKCiAgICAgICAgLy8gVHJpZ2dlciB0aGUgaGlkZSBhbmltYXRpb25zCiAgICAgICAgcG9wVXAxLmNsYXNzTGlzdC5yZW1vdmUoInNob3ciKTsKICAgICAgICBvdmVybGF5MS5jbGFzc0xpc3QucmVtb3ZlKCJzaG93Iik7CiAgICB9Cjwvc2NyaXB0PgoKCjwvYm9keT4KCjwvaHRtbD4="
[IO.File]::WriteAllBytes((Join-Path $root "views/partials/footer.ejs"), [Convert]::FromBase64String($b))
$b = "PGRpdiBjbGFzcz0iY29sLW1kLTMgIj4KCiAgICA8ZGl2IGNsYXNzPSJib3JkZXIgcHgtMyBweS0zIj4KICAgICAgICA8aDQgY2xhc3M9InNpZGViYXJfX3dpZGdldC10aXRsZSI+TGF0ZXN0IFBvc3RzPC9oND4KCiAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhcl9fcG9zdC1saXN0IG15LTMiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXJfX3Bvc3QtaXRlbSBtYi00Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyX19wb3N0LXRodW1iIj4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBMaW5rIHRvIHRoZSBibG9nIHBvc3QgZGV0YWlsIHBhZ2UgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IjwlPSAkc2x1ZyAlPiIgY2xhc3M9InRleHQtZGFyayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEJsb2cgcG9zdCB0aHVtYm5haWwgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iPCU9IEJBU0VfVVJMICU+PCU9ICRwb3N0WydpbWFnZSddICU+IiBhbHQ9IjwlPSBodG1sc3BlY2lhbGNoYXJzKCRwb3N0Wyd0aXRsZSddKSAlPiIgY2xhc3M9ImltZy1mbHVpZCBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXJfX3Bvc3QtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQmxvZyBwb3N0IHRpdGxlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ0ZXh0LWRlY29yYXRpb24tbm9uZSB0ZXh0LWRhcmsiIGhyZWY9IjwlPSBCQVNFX1VSTCAuICdibG9nLycgLiAkcG9zdFsnc2x1ZyddICU+IiBjbGFzcz0idGV4dC1kYXJrIG10LTIgZm9udC0xNSI+PCU9IGh0bWxzcGVjaWFsY2hhcnMoJHBvc3RbJ3RpdGxlJ10pICU+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEJsb2cgcG9zdCBkYXRlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGF0ZSBmb250LTE1Ij48aSBjbGFzcz0iZmxhdGljb24tdGltZSI+PC9pPjwlPSBkYXRlKCdNIGosIFknLCBzdHJ0b3RpbWUoJHBvc3RbJ2RhdGUnXSkpICU+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIAogICAgICAgIDwvZGl2PgogICAgPC9kaXY+Cgo8L2Rpdj4="
[IO.File]::WriteAllBytes((Join-Path $root "views/partials/left-bar.ejs"), [Convert]::FromBase64String($b))
$b = "aW1wb3J0IGV4cHJlc3MgZnJvbSAiZXhwcmVzcyI7CmltcG9ydCBwYXRoIGZyb20gInBhdGgiOwppbXBvcnQgY29tcHJlc3Npb24gZnJvbSAiY29tcHJlc3Npb24iOwppbXBvcnQgbW9yZ2FuIGZyb20gIm1vcmdhbiI7CmltcG9ydCB7IHJvdXRlciBhcyBwYWdlcyB9IGZyb20gIi4vcm91dGVzL3BhZ2VzIjsKCmNvbnN0IGFwcCA9IGV4cHJlc3MoKTsKY29uc3QgUE9SVCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDsKCmFwcC5zZXQoInZpZXcgZW5naW5lIiwgImVqcyIpOwphcHAuc2V0KCJ2aWV3cyIsIHBhdGguam9pbihfX2Rpcm5hbWUsICIuLiIsICJ2aWV3cyIpKTsKCmFwcC51c2UoIi9zdGF0aWMiLCBleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAiLi4iLCAicHVibGljIikpKTsKYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7CmFwcC51c2UoY29tcHJlc3Npb24oKSk7CmFwcC51c2UobW9yZ2FuKCJ0aW55IikpOwoKYXBwLnVzZSgiLyIsIHBhZ2VzKTsKCmFwcC5saXN0ZW4oUE9SVCwgKCkgPT4gewogIGNvbnNvbGUubG9nKGBzZXJ2ZXIgb24gaHR0cDovL2xvY2FsaG9zdDoke1BPUlR9YCk7Cn0pOw=="
[IO.File]::WriteAllBytes((Join-Path $root "src/server.ts"), [Convert]::FromBase64String($b))
$b = ""
[IO.File]::WriteAllBytes((Join-Path $root "src/data/blog_data.ts"), [Convert]::FromBase64String($b))
$b = "aW1wb3J0IHsgUm91dGVyLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gImV4cHJlc3MiOwppbXBvcnQgeyBibG9nX3Bvc3RzLCBCbG9nUG9zdCB9IGZyb20gIi4uL2RhdGEvYmxvZ19kYXRhIjsKCmV4cG9ydCBjb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTsKCi8vIGJhc2UgdXJsIGZvciBhc3NldHMKY29uc3QgQkFTRV9VUkwgPSAiLyI7CgpmdW5jdGlvbiByZW5kZXIocmVzOiBSZXNwb25zZSwgdmlldzogc3RyaW5nLCBtZXRhOiBhbnkgPSB7fSkgewogIGNvbnN0IGxvY2FscyA9IHsKICAgIHRpdGxlOiBtZXRhLnRpdGxlIHx8ICIiLAogICAgZGVzY3JpcHRpb246IG1ldGEuZGVzY3JpcHRpb24gfHwgIiIsCiAgICBrZXl3b3JkczogbWV0YS5rZXl3b3JkcyB8fCAiIiwKICAgIGgxOiBtZXRhLmgxIHx8ICIiLAogICAgY3VycmVudF9wYWdlOiB2aWV3LnJlcGxhY2UoIi5lanMiLCIiKSwKICAgIEJBU0VfVVJMCiAgfTsKICByZXR1cm4gcmVzLnJlbmRlcih2aWV3LCBsb2NhbHMpOwp9Cgpyb3V0ZXIuZ2V0KCIvIiwgKHJlcSwgcmVzKSA9PiByZW5kZXIocmVzLCAiaW5kZXguZWpzIiwgeyB0aXRsZTogIkJlc3QgQ29uc3RydWN0aW9uIENvbXBhbnkgSW4gQmFuZ2Fsb3JlIHwgQXRoYSBjb25zdHJ1Y3Rpb24iLCBkZXNjcmlwdGlvbjogIkV4cGxvcmUgQXRoYSBDb25zdHJ1Y3Rpb24sIHRoZSBiZXN0IGNvbnN0cnVjdGlvbiBjb21wYW55IGluIEJhbmdhbG9yZS4gRXhwZXJ0IGJ1aWxkZXJzIGRlbGl2ZXJpbmcgcXVhbGl0eSwgaW5ub3ZhdGlvbiwgYW5kIGV4Y2VsbGVuY2UgaW4gZXZlcnkgcHJvamVjdC4gVmlzaXQgdXMiLCBrZXl3b3JkczogIkNvbnN0cnVjdGlvbiBDb21wYW5pZXMgSW4gQmFuZ2Fsb3JlLCBCZXN0IENvbnN0cnVjdGlvbiBDb21wYW55IEluIEJhbmdhbG9yZSwgcmVzaWRlbnRpYWwgY29uc3RydWN0aW9uIGNvbXBhbmllcyBpbiBiYW5nYWxvcmUsICIsIGgxOiAiIiB9KSk7CnJvdXRlci5nZXQoIi9hYm91dCIsIChyZXEsIHJlcykgPT4gcmVuZGVyKHJlcywgImFib3V0LmVqcyIsIHsgdGl0bGU6ICJBYm91dCB1cyB8IFJlc2lkZW50aWFsIENvbnN0cnVjdGlvbiBDb21wYW5pZXMgaW4gQmFuZ2Fsb3JlIiwgZGVzY3JpcHRpb246ICJMZWFybiBhYm91dCBBdGhhIENvbnN0cnVjdGlvbiwgdGhlIG1vc3QgcmVwdXRhYmxlIHJlc2lkZW50aWFsIGNvbnN0cnVjdGlvbiBjb21wYW5pZXMgaW4gQmFuZ2Fsb3JlLCB3aGljaCBwcm9kdWNlcyBoaWdoLXF1YWxpdHkgaG9tZXMgd2l0aCBjcmVhdGl2aXR5IGFuZCBza2lsbC4iLCBrZXl3b3JkczogInJlc2lkZW50aWFsIGNvbnN0cnVjdGlvbiBjb21wYW5pZXMgaW4gYmFuZ2Fsb3JlLCBIb21lIENvbnN0cnVjdGlvbiBjb250cmFjdG9ycyBJbiBCYW5nYWxvcmUsIEF0aGEgY29uc3RydWN0aW9uIGluIGJhbmdhbG9yZSIsIGgxOiAiIiB9KSk7CnJvdXRlci5nZXQoIi9zZXJ2aWNlcyIsIChyZXEsIHJlcykgPT4gcmVuZGVyKHJlcywgInNlcnZpY2VzLmVqcyIsIHsgdGl0bGU6ICJBdGhhIENvbnN0cnVjdGlvbiBzZXJ2aWNlcyB8IEhvbWUgYXJjaGl0ZWN0dXJlIGRlc2lnbiIsIGRlc2NyaXB0aW9uOiAiQXRoYSBDb25zdHJ1Y3Rpb24gb2ZmZXJzIGV4cGVydCBob21lIGFyY2hpdGVjdHVyZSBkZXNpZ24gc2VydmljZXMsIGJsZW5kaW5nIGNyZWF0aXZpdHkgYW5kIGZ1bmN0aW9uYWxpdHkgdG8gYnJpbmcgeW91ciBkcmVhbSBob21lIHRvIGxpZmUuIENvbnRhY3QgdXMgZm9yIGN1c3RvbWl6ZWQgc29sdXRpb25zISIsIGtleXdvcmRzOiAiSG9tZSBBcmNoaXRlY3R1cmUgRGVzaWduLCBIb21lIENvbnN0cnVjdGlvbiBTZXJ2aWNlcyBpbiBCYWxsYXJpIiwgaDE6ICIiIH0pKTsKcm91dGVyLmdldCgiL2NhcmVlcnMiLCAocmVxLCByZXMpID0+IHJlbmRlcihyZXMsICJjYXJlZXJzLmVqcyIsIHsgdGl0bGU6ICJBdGhhIGNvbnN0cnVjdGlvbiB8QXRoYSBjb25zdHJ1Y3Rpb24gQ2FycmVyIiwgZGVzY3JpcHRpb246ICJFeHBsb3JlIGV4Y2l0aW5nIGNhcmVlciBvcHBvcnR1bml0aWVzIHdpdGggQXRoYSBDb25zdHJ1Y3Rpb24uIEpvaW4gb3VyIGR5bmFtaWMgdGVhbSBhbmQgYnVpbGQgeW91ciBmdXR1cmUgd2l0aCBhIGxlYWRpbmcgbmFtZSBpbiB0aGUgY29uc3RydWN0aW9uIGluZHVzdHJ5LiIsIGtleXdvcmRzOiAiVG9wIENvbnN0cnVjdGlvbiBDb21wYW55IEluIEJhbGxhcmksIEhvbWUgQ29uc3RydWN0aW9uIEluIEJhbGxhcmksIENvbnN0cnVjdGlvbiBDb21wYW5pZXMgSW4gQmFuZ2Fsb3JlLCBWaWxsYSBDb25zdHJ1Y3Rpb24gQ29tcGFueSBJbiBCYW5nYWxvcmUiLCBoMTogIiIgfSkpOwpyb3V0ZXIuZ2V0KCIvY29udGFjdCIsIChyZXEsIHJlcykgPT4gcmVuZGVyKHJlcywgImNvbnRhY3QuZWpzIiwgeyB0aXRsZTogIkNvbnRhY3R8QXRoYSBjb25zdHJ1Y3Rpb24gaW4gIEJhbmdhbG9yZSB8IEdldCBpbiB0b3VjaCB3aXRoIFVzIiwgZGVzY3JpcHRpb246ICJBdGhhIENvbnN0cnVjdGlvbiBpcyBhIGxlYWRpbmcgY29uc3RydWN0aW9uIGNvbXBhbnkgaW4gQmFuZ2Fsb3JlLiBHZXQgaW4gdG91Y2ggd2l0aCBBdGhhIENvbnN0cnVjdGlvbiBmb3IgcXVhbGl0eSwgcmVsaWFibGUsIGFuZCBpbm5vdmF0aXZlIGJ1aWxkaW5nIHNvbHV0aW9ucyB0b2RheSEiLCBrZXl3b3JkczogIkNvbnN0cnVjdGlvbiBDb21wYW55IEluIEJhbGxhcmkiLCBoMTogIiIgfSkpOwpyb3V0ZXIuZ2V0KCIvZ2FsbGVyeSIsIChyZXEsIHJlcykgPT4gcmVuZGVyKHJlcywgImdhbGxlcnkuZWpzIiwgeyB0aXRsZTogIkF0aGEgY29uc3RydWN0aW9uIEdhbGxlcnkgfCBIb21lIGRlc2lnbmVycyBJbiBteXNvcmUiLCBkZXNjcmlwdGlvbjogIkV4cGxvcmUgdGhlIGdhbGxlcnkgb2YgQXRoYSBDb25zdHJ1Y3Rpb24sIHRvcCBob21lIGRlc2lnbmVycyBpbiBteXNvcmUuIERpc2NvdmVyIGlubm92YXRpdmUgZGVzaWducywgcXVhbGl0eSBjcmFmdHNtYW5zaGlwLCBhbmQgYmVzcG9rZSBzb2x1dGlvbnMgZm9yIHlvdXIgZHJlYW0gaG9tZS4iLCBrZXl3b3JkczogIkhvbWUgRGVzaWduZXJzIEluIG15c29yZSwgSW5ub3ZhdGl2ZSBkZXNpZ25lcnMgaW4gQmFuZ2Fsb3JlIiwgaDE6ICIiIH0pKTsKcm91dGVyLmdldCgiL3Byb3BlcnRpZXMiLCAocmVxLCByZXMpID0+IHJlbmRlcihyZXMsICJwcm9wZXJ0aWVzLmVqcyIsIHsgdGl0bGU6ICJWaWxsYSBDb25zdHJ1Y3Rpb24gQ29tcGFueSBteXNvcmUgfEF0aGEgY29uc3RydWN0aW9uIiwgZGVzY3JpcHRpb246ICJFeHBsb3JlIGV4Y2l0aW5nIGNhcmVlciBvcHBvcnR1bml0aWVzIHdpdGggQXRoYSBDb25zdHJ1Y3Rpb24uIEpvaW4gb3VyIGR5bmFtaWMgdGVhbSBhbmQgYnVpbGQgeW91ciBmdXR1cmUgd2l0aCBhIGxlYWRpbmcgbmFtZSBpbiB0aGUgY29uc3RydWN0aW9uIGluZHVzdHJ5LiIsIGtleXdvcmRzOiAiVmlsbGEgQ29uc3RydWN0aW9uIENvbXBhbnkgbXlzb3JlLCBWaWxsYSBDb25zdHJ1Y3Rpb24gQ29tcGFueSBJbiBCYW5nYWxvcmUiLCBoMTogIiIgfSkpOwpyb3V0ZXIuZ2V0KCIvcGFja2FnZXMiLCAocmVxLCByZXMpID0+IHJlbmRlcihyZXMsICJwYWNrYWdlcy5lanMiLCB7IHRpdGxlOiAiSG91c2UgUGxhbm5lcnMgaW4gQmFuZ2Fsb3JlIHwgQXRoYSBDb25zdHJ1Y3Rpb24gUGFja2FnZXMiLCBkZXNjcmlwdGlvbjogIkRpc2NvdmVyIGV4cGVydCBob3VzZSBwbGFubmVycyBpbiBCYW5nYWxvcmUgd2l0aCBBdGhhIENvbnN0cnVjdGlvbiBQYWNrYWdlcy4gVGFpbG9yZWQgZGVzaWducywgcXVhbGl0eSBjb25zdHJ1Y3Rpb24sIGFuZCBhZmZvcmRhYmxlIHByaWNpbmcuIFZpc2l0IHVzIG5vdyEiLCBrZXl3b3JkczogIkF0aGEgQ29uc3RydWN0aW9uIFBhY2thZ2VzLCBob3VzZSBwbGFubmVycyBpbiBiYW5nYWxvcmUsIGhvbWUgYXJjaGl0ZWN0dXJlIGRlc2lnbiIsIGgxOiAiIiB9KSk7CgovLyBCbG9ncyBsaXN0CnJvdXRlci5nZXQoIi9ibG9ncyIsIChyZXEsIHJlcykgPT4gewogIGNvbnN0IGxpc3Q6IEJsb2dQb3N0W10gPSBPYmplY3QudmFsdWVzKGJsb2dfcG9zdHMpOwogIHJlcy5yZW5kZXIoImJsb2dzLmVqcyIsIHsgdGl0bGU6ICJCbG9ncyB8IEhvbWUgQ29uc3RydWN0aW9uIENvbXBhbnkgaW4gQmFuZ2Fsb3JlIHwgQXRoYSBjb25zdHJ1Y3Rpb24iLCBkZXNjcmlwdGlvbjogIkdldCBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBIb21lIENvbnN0cnVjdGlvbiBDb21wYW55IGluIEJhbmdhbG9yZSB3aXRoIEF0aGEgY29uc3RydWN0aW9uLiBGb3IgZGV0YWlscyBhYm91dCBvdXIgcHJvamVjdHMgYW5kIHNlcnZpY2VzLCB2aXNpdCBvdXIgYmxvZyBwYWdlIHRvZGF5ISIsIGtleXdvcmRzOiAiSG9tZSBDb25zdHJ1Y3Rpb24gSW4gQmFuZ2Fsb3JlLCBIb21lIGF1dG9tYXRpb24gaW4gQmFuZ2Fsb3JlLCBIb21lIENvbnN0cnVjdGlvbiBDb21wYW55IGluIEJhbmdhbG9yZSIsIGgxOiAiIiwgYmxvZ19wb3N0c19saXN0OiBsaXN0LCBjdXJyZW50X3BhZ2U6ICJibG9ncyIsIEJBU0VfVVJMIH0pOwp9KTsKCi8vIEJsb2cgZGV0YWlsCnJvdXRlci5nZXQoIi9ibG9nLzpzbHVnIiwgKHJlcSwgcmVzKSA9PiB7CiAgY29uc3Qgc2x1ZyA9IHJlcS5wYXJhbXMuc2x1ZzsKICBjb25zdCBwb3N0ID0gKGJsb2dfcG9zdHMgYXMgYW55KVtzbHVnXTsKICBpZiAoIXBvc3QpIHJldHVybiByZXMuc3RhdHVzKDQwNCkuc2VuZCgiQmxvZyBwb3N0IG5vdCBmb3VuZCIpOwogIHJlcy5yZW5kZXIoImJsb2dfZGV0YWlsLmVqcyIsIHsgdGl0bGU6IHBvc3QuTWV0YV9UaXRsZSB8fCBwb3N0LnRpdGxlLCBkZXNjcmlwdGlvbjogcG9zdC5NZXRhX0Rlc2NyaXB0aW9uIHx8ICIiLCBrZXl3b3JkczogcG9zdC5LZXl3b3JkIHx8ICIiLCBoMTogcG9zdC5oMSB8fCBwb3N0LnRpdGxlLCBwb3N0LCBzbHVnLCBjdXJyZW50X3BhZ2U6ICJibG9nX2RldGFpbCIsIEJBU0VfVVJMIH0pOwp9KTsKCnJvdXRlci5nZXQoIi90aGFua3lvdSIsIChyZXEsIHJlcykgPT4gcmVuZGVyKHJlcywgInRoYW5reW91LmVqcyIsIHsgdGl0bGU6ICJUaGFuayB5b3UiLCBkZXNjcmlwdGlvbjogIiIsIGtleXdvcmRzOiAiIiwgaDE6ICIiIH0pKTsKCi8vIENvbnRhY3QgZm9ybSBzdWJtaXNzaW9uIChzdHViKQpyb3V0ZXIucG9zdCgiL2NvbnRhY3QiLCAocmVxLCByZXMpID0+IHsKICAvLyBUT0RPOiBwbHVnIG5vZGVtYWlsZXIgaGVyZS4gRm9yIG5vdywganVzdCBPSy4KICByZXMuanNvbih7IHN0YXR1czogIk9LIiB9KTsKfSk7"
[IO.File]::WriteAllBytes((Join-Path $root "src/routes/pages.ts"), [Convert]::FromBase64String($b))
Write-Host "Project created at: $root"
Write-Host "Next steps:"
Write-Host "1) Copy your existing assetes folder into $root\public\assetes"
Write-Host "2) cd $root; npm i; npm run dev"